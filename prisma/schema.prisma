generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model active_admin_comments {
  id            BigInt   @id @default(autoincrement())
  namespace     String?  @db.VarChar
  body          String?
  resource_type String?  @db.VarChar
  resource_id   BigInt?
  author_type   String?  @db.VarChar
  author_id     BigInt?
  created_at    DateTime @db.Timestamp(6)
  updated_at    DateTime @db.Timestamp(6)

  @@index([author_type, author_id], map: "index_active_admin_comments_on_author")
  @@index([namespace], map: "index_active_admin_comments_on_namespace")
  @@index([resource_type, resource_id], map: "index_active_admin_comments_on_resource")
}

model active_storage_attachments {
  id                   BigInt               @id @default(autoincrement())
  name                 String               @db.VarChar
  record_type          String               @db.VarChar
  record_id            BigInt
  blob_id              BigInt
  created_at           DateTime             @db.Timestamp(6)
  active_storage_blobs active_storage_blobs @relation(fields: [blob_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_c3b3935057")

  @@unique([record_type, record_id, name, blob_id], map: "index_active_storage_attachments_uniqueness")
  @@index([blob_id], map: "index_active_storage_attachments_on_blob_id")
}

model active_storage_blobs {
  id                             BigInt                           @id @default(autoincrement())
  key                            String                           @unique(map: "index_active_storage_blobs_on_key") @db.VarChar
  filename                       String                           @db.VarChar
  content_type                   String?                          @db.VarChar
  metadata                       String?
  byte_size                      BigInt
  checksum                       String?                          @db.VarChar
  created_at                     DateTime                         @db.Timestamp(6)
  service_name                   String                           @db.VarChar
  active_storage_attachments     active_storage_attachments[]
  active_storage_variant_records active_storage_variant_records[]
}

model active_storage_variant_records {
  id                   BigInt               @id @default(autoincrement())
  blob_id              BigInt
  variation_digest     String               @db.VarChar
  active_storage_blobs active_storage_blobs @relation(fields: [blob_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_993965df05")

  @@unique([blob_id, variation_digest], map: "index_active_storage_variant_records_uniqueness")
}

model admin_users {
  id                     BigInt    @id @default(autoincrement())
  email                  String    @unique(map: "index_admin_users_on_email") @default("") @db.VarChar
  encrypted_password     String    @default("") @db.VarChar
  reset_password_token   String?   @unique(map: "index_admin_users_on_reset_password_token") @db.VarChar
  reset_password_sent_at DateTime? @db.Timestamp(6)
  remember_created_at    DateTime? @db.Timestamp(6)
  created_at             DateTime  @db.Timestamp(6)
  updated_at             DateTime  @db.Timestamp(6)
}

model ar_internal_metadata {
  key        String   @id @db.VarChar
  value      String?  @db.VarChar
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
}

model artist_metrics {
  id                        BigInt   @id @default(autoincrement())
  artist_id                 BigInt
  spotify_monthly_listeners Float?
  created_at                DateTime @db.Timestamp(6)
  updated_at                DateTime @db.Timestamp(6)
  artists                   artists  @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_ba6dab721f")

  @@index([artist_id], map: "index_artist_metrics_on_artist_id")
}

model artist_tokens {
  id                            BigInt   @id @default(autoincrement())
  artist_id                     BigInt
  name                          String?  @db.VarChar
  is_frozen                     Boolean  @default(true)
  total_supply                  Int?
  price                         String?  @db.VarChar
  price_evolution               Float?
  valorisation                  Int?
  contract_address_v1           String?  @db.VarChar
  token_contract_address_v1     String?  @db.VarChar
  token_ico_contract_address_v1 String?  @db.VarChar
  percent_for_bolero            Float?   @default(0.05)
  percent_for_artist            Float?   @default(0.2)
  percent_for_liquidity         Float?   @default(0.2)
  shares                        Float    @default(0.8)
  is_bolero_collecting          Boolean  @default(false)
  stripe_country                String?  @db.VarChar
  default_currency              String?  @db.VarChar
  stripe_id                     String?  @db.VarChar
  charges_enabled               Boolean  @default(false)
  can_accept_card_payment       Boolean  @default(false)
  finished_stripe_onboarding    Boolean  @default(false)
  created_at                    DateTime @db.Timestamp(6)
  updated_at                    DateTime @db.Timestamp(6)
  hex_color                     String?  @db.VarChar
  pending_price                 String?  @db.VarChar
  pending_raw_price             String?  @db.VarChar
  disabled                      Boolean  @default(false)
  artists                       artists  @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_fd4dc27978")

  @@index([artist_id], map: "index_artist_tokens_on_artist_id")
}

model artists {
  id                                BigInt                            @id @default(autoincrement())
  name                              String                            @db.VarChar
  genre                             String?                           @db.VarChar
  soundcloud_profile                String?                           @db.VarChar
  spotify_profile                   String?                           @db.VarChar
  deezer_profile                    String?                           @db.VarChar
  apple_profile                     String?                           @db.VarChar
  youtube_profile                   String?                           @db.VarChar
  instagram_profile                 String?                           @db.VarChar
  tiktok_profile                    String?                           @db.VarChar
  twitch_profile                    String?                           @db.VarChar
  facebook_profile                  String?                           @db.VarChar
  created_at                        DateTime                          @db.Timestamp(6)
  updated_at                        DateTime                          @db.Timestamp(6)
  user_id                           BigInt
  card_name                         String?                           @db.VarChar
  card_price_cents                  String                            @default("5000000000000000000") @db.VarChar
  card_price_evolution              Float?
  country                           String?                           @db.VarChar
  twitter_profile                   String?                           @db.VarChar
  validated                         Boolean                           @default(false)
  uuid                              String?                           @db.VarChar
  slug                              String?                           @unique(map: "index_artists_on_slug") @db.VarChar
  second_genre                      String?                           @db.VarChar
  third_genre                       String?                           @db.VarChar
  category                          String?                           @db.VarChar
  validated_at                      DateTime?                         @db.Timestamp(6)
  phone_number                      String?
  songkick_profile                  String?                           @db.VarChar
  active                            Boolean?                          @default(true)
  total_cards_supply                Float?                            @default(1000.0)
  management_mail                   String                            @db.VarChar
  management_phone                  String?                           @db.VarChar
  publisher                         String?                           @db.VarChar
  label                             String?                           @db.VarChar
  genius_url                        String?                           @db.VarChar
  beatmaker                         Boolean?                          @default(false)
  genius_id                         String?                           @db.VarChar
  tokenized                         Boolean                           @default(false)
  token_contract_address_deprecated String?                           @db.VarChar
  audius_profile                    String?                           @db.VarChar
  tokenized_at                      DateTime?                         @db.Timestamp(6)
  early                             Boolean?                          @default(false)
  suspended                         Boolean?                          @default(false)
  deprecated                        Boolean?                          @default(false)
  token_primary                     Boolean?                          @default(true)
  token_on_secondary_at             DateTime?                         @db.Timestamp(6)
  token_for_bolero                  Float?                            @default(0.05)
  token_for_artist                  Float?                            @default(0.2)
  token_for_liquidity               Float?                            @default(0.2)
  is_frozen                         Boolean                           @default(true)
  shares                            Float                             @default(0.8)
  home_top_section_rank             Int?
  home_stay_ahead_section_rank      Int?
  similar                           Boolean                           @default(false)
  for_gift_only                     Boolean                           @default(false)
  music_genre_id                    BigInt?
  hot_stuff_rank                    Int?
  country_flag                      String?                           @db.VarChar
  current_status                    String?                           @db.VarChar
  reward_email                      String?                           @db.VarChar
  stripe_country                    String?                           @db.VarChar
  visible                           Boolean?                          @default(false)
  visible_at                        DateTime?                         @db.Timestamp(6)
  teasing_mode                      Boolean?                          @default(false)
  ready_to_tease                    Boolean?                          @default(false)
  teasing_description               String?
  major                             String?                           @db.VarChar
  is_doing_song                     Boolean?                          @default(false)
  is_doing_token                    Boolean?                          @default(false)
  bio_fr                            String?
  bio_en                            String?
  certified                         Boolean                           @default(true)
  song_featured_only                Boolean?                          @default(false)
  artisttextsearchable_index_col    Unsupported("tsvector")?
  spotify_image_url                 String?                           @db.VarChar
  music_genres                      music_genres?                     @relation(fields: [music_genre_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_0b5a15b091")
  users                             users                             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_6bcbebdd23")
  artist_metrics                    artist_metrics[]
  artist_partner_amount_histories   artist_partner_amount_histories[]
  artist_tokens                     artist_tokens[]
  blockchain_transactions           blockchain_transactions[]
  collections                       collections[]
  compilations                      compilations[]
  contributors                      contributors[]
  deprecated_token_transactions     deprecated_token_transactions[]
  discounts                         discounts[]
  global_transactions               global_transactions[]
  multiple_groups                   multiple_groups[]
  nfts                              nfts[]
  offchain_transactions             offchain_transactions[]
  partnerships                      partnerships[]
  song_featured_artists             song_featured_artists[]
  songs                             songs[]
  stripe_splitters                  stripe_splitters[]
  stripe_transactions               stripe_transactions[]
  token_prices                      token_prices[]
  top_partners_by_artists           top_partners_by_artists[]
  update_bc_prices                  update_bc_prices[]
  user_perks                        user_perks[]

  @@index([artisttextsearchable_index_col], map: "artisttextsearch_idx")
  @@index([artisttextsearchable_index_col], map: "artisttextsearchable_index")
  @@index([music_genre_id], map: "index_artists_on_music_genre_id")
  @@index([user_id], map: "index_artists_on_user_id")
}

model bid_offers {
  id                      BigInt   @id @default(autoincrement())
  amount                  String   @db.VarChar
  bidder_wallet_address   String   @db.VarChar
  bid_id                  BigInt
  user_id                 BigInt?
  tx_hash                 String   @unique(map: "index_bid_offers_on_tx_hash") @db.VarChar
  created_at              DateTime @db.Timestamp(6)
  updated_at              DateTime @db.Timestamp(6)
  bid_counter             BigInt
  executed                Boolean  @default(false)
  version                 Int?
  bid_version_and_counter String   @db.VarChar
  bids                    bids     @relation(fields: [bid_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_18f102c528")
  users                   users?   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_12be02cbe6")

  @@index([bid_id], map: "index_bid_offers_on_bid_id")
  @@index([user_id], map: "index_bid_offers_on_user_id")
  @@index([bid_version_and_counter], map: "index_bid_ofs_on_bid_vers_and_ctr")
}

model bids {
  id                          BigInt       @id @default(autoincrement())
  want_address                String       @db.VarChar
  want_token_symbol           String       @db.VarChar
  price                       String       @db.VarChar
  status                      String       @db.VarChar
  start_time                  DateTime     @db.Timestamp(6)
  end_time                    DateTime     @db.Timestamp(6)
  bolero_nft_contract_address String       @db.VarChar
  seller_address              String       @db.VarChar
  primary_market              Boolean      @default(true)
  nft_token_id                BigInt?
  created_at                  DateTime     @db.Timestamp(6)
  updated_at                  DateTime     @db.Timestamp(6)
  tx_hash                     String       @db.VarChar
  counter                     BigInt
  start_price                 String       @db.VarChar
  cancelled_at                DateTime?    @db.Timestamp(6)
  version                     Int?
  version_and_counter         String       @unique(map: "index_bids_on_contract_version_and_counter") @db.VarChar
  nft_version_and_token_id    String       @db.VarChar
  bid_offers                  bid_offers[]

  @@index([nft_version_and_token_id], map: "index_bids_on_nft_version_and_token_id")
}

model blockchain_transactions {
  id                         BigInt   @id @default(autoincrement())
  tx_hash                    String?  @db.VarChar
  artist_id                  BigInt
  created_at                 DateTime @db.Timestamp(6)
  updated_at                 DateTime @db.Timestamp(6)
  is_nft                     Boolean? @default(false)
  value                      String?  @db.VarChar
  token_count                String?  @db.VarChar
  currency                   String?  @default("USDC") @db.VarChar
  primary_market             Boolean? @default(true)
  artist_earnings            String?  @db.VarChar
  seller_address             String?  @db.VarChar
  buyer_address              String?  @db.VarChar
  nft_token_id               BigInt?
  direct_buy                 Boolean? @default(false)
  status                     String?  @db.VarChar
  stripe_transaction_id      BigInt?  @unique(map: "index_blockchain_transactions_on_stripe_transaction_id")
  nft_version                Int?
  nft_version_and_token_id   String?  @db.VarChar
  country_code               String?  @db.VarChar
  deprecated                 Boolean  @default(false)
  song_id                    BigInt?
  share_version              Int?
  share_token_id             String?  @db.VarChar
  share_version_and_token_id String?  @db.VarChar
  is_song_share              Boolean? @default(false)
  bc_status                  String?  @default("pending") @db.VarChar
  has_reincremented_supply   Boolean  @default(false)
  email_sent                 Boolean  @default(false)
  previous_transaction_price Float?
  buyer_type                 String   @db.VarChar
  seller_type                String?  @db.VarChar
  artists                    artists  @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_93c5b6c75a")
  shares                     shares?  @relation(fields: [share_version_and_token_id], references: [bc_version_and_token_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_c3fed6ba4d")
  songs                      songs?   @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_92eae7bdb9")

  @@unique([tx_hash, share_token_id], map: "index_blockchain_transactions_on_tx_hash_and_share_token_id")
  @@index([nft_version_and_token_id], map: "index_bc_txs_on_nft_version_and_token_id")
  @@index([artist_id], map: "index_blockchain_transactions_on_artist_id")
  @@index([tx_hash], map: "index_blockchain_transactions_on_tx_hash")
  @@index([share_version_and_token_id], map: "index_blockchain_transactions_on_share_version_and_token_id")
  @@index([song_id], map: "index_blockchain_transactions_on_song_id")
  @@index([buyer_address], map: "index_blockchain_transactions_on_buyer_address")
  @@index([seller_address], map: "index_blockchain_transactions_on_seller_address")
}

model collections {
  id                     BigInt   @id @default(autoincrement())
  name                   String   @db.VarChar
  artist_royalties       Float?   @default(15.0)
  total_supply           Int
  private_sale           Boolean  @default(false)
  private_sale_threshold String?  @db.VarChar
  artist_id              BigInt?
  created_at             DateTime @db.Timestamp(6)
  updated_at             DateTime @db.Timestamp(6)
  wallet_address         String   @db.VarChar
  token_id               BigInt
  version                Int
  version_and_token_id   String   @unique(map: "index_collections_on_version_and_token_id") @db.VarChar
  artists                artists? @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_469d01856d")
  nfts                   nfts[]

  @@index([artist_id], map: "index_collections_on_artist_id")
}

model compilations {
  id              BigInt            @id @default(autoincrement())
  name            String?           @db.VarChar
  description     String?
  artist_id       BigInt?
  created_at      DateTime          @db.Timestamp(6)
  updated_at      DateTime          @db.Timestamp(6)
  published       Boolean           @default(false)
  slug            String?           @unique(map: "index_compilations_on_slug") @db.VarChar
  count           Int?              @default(0)
  artists         artists?          @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_7581e27176")
  contributors    contributors[]
  multiple_groups multiple_groups[]
  nfts            nfts[]

  @@index([artist_id], map: "index_compilations_on_artist_id")
}

model contributors {
  id                  BigInt        @id @default(autoincrement())
  email               String        @db.VarChar
  accepted_invitation Boolean       @default(false)
  compilation_id      BigInt?
  artist_id           BigInt?
  created_at          DateTime      @db.Timestamp(6)
  updated_at          DateTime      @db.Timestamp(6)
  artists             artists?      @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_c751d6349e")
  compilations        compilations? @relation(fields: [compilation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_3c55c3240c")

  @@index([artist_id], map: "index_contributors_on_artist_id")
  @@index([compilation_id], map: "index_contributors_on_compilation_id")
}

model currencies {
  id         BigInt   @id @default(autoincrement())
  balance    String   @db.VarChar
  user_id    BigInt
  symbol     String?  @db.VarChar
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
  users      users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_c831635a42")

  @@unique([symbol, user_id], map: "uniq_symbol_per_user")
  @@index([user_id], map: "index_currencies_on_user_id")
}

model discounts {
  id                    BigInt                  @id @default(autoincrement())
  name                  String?                 @db.VarChar
  user_id               BigInt?
  active                Boolean?
  created_at            DateTime                @db.Timestamp(6)
  updated_at            DateTime                @db.Timestamp(6)
  used_at               DateTime?               @db.Timestamp(6)
  artist_id             BigInt?
  percentage            Float?
  user_deleted          Boolean                 @default(false)
  purchase_id           BigInt?
  artists               artists?                @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_35f35c9fee")
  purchases             purchases?              @relation(fields: [purchase_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_c11ad889f2")
  users                 users?                  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_9a0dc6cff5")
  offchain_transactions offchain_transactions[]
  stripe_transactions   stripe_transactions[]

  @@index([artist_id], map: "index_discounts_on_artist_id")
  @@index([user_id], map: "index_discounts_on_user_id")
  @@index([purchase_id], map: "index_discounts_on_purchase_id")
}

model early_access_list_users {
  id          BigInt   @id @default(autoincrement())
  email       String   @db.VarChar
  user_id     BigInt?
  created_at  DateTime @db.Timestamp(6)
  updated_at  DateTime @db.Timestamp(6)
  artist_id   BigInt?
  artist_name String?  @db.VarChar
  users       users?   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_0e069eb060")

  @@index([artist_id], map: "index_early_access_list_users_on_early_access_list_id")
  @@index([user_id], map: "index_early_access_list_users_on_user_id")
}

model follows {
  id           BigInt   @id @default(autoincrement())
  user_id      BigInt?
  following_id BigInt?
  created_at   DateTime @db.Timestamp(6)
  updated_at   DateTime @db.Timestamp(6)

  @@unique([user_id, following_id], map: "index_follows_on_user_id_and_following_id")
  @@index([following_id], map: "index_follows_on_following_id")
  @@index([user_id], map: "index_follows_on_user_id")
}

model friendly_id_slugs {
  id             BigInt    @id @default(autoincrement())
  slug           String    @db.VarChar
  sluggable_id   Int
  sluggable_type String?   @db.VarChar(50)
  scope          String?   @db.VarChar
  created_at     DateTime? @db.Timestamp(6)

  @@unique([slug, sluggable_type, scope], map: "index_friendly_id_slugs_on_slug_and_sluggable_type_and_scope")
  @@index([slug, sluggable_type], map: "index_friendly_id_slugs_on_slug_and_sluggable_type")
  @@index([sluggable_type, sluggable_id], map: "index_friendly_id_slugs_on_sluggable_type_and_sluggable_id")
}

model lambda_monitorings {
  id                     BigInt    @id @default(autoincrement())
  function_name          String?   @db.VarChar
  start_date             DateTime? @db.Timestamp(6)
  end_date               DateTime? @db.Timestamp(6)
  treated_elements_count String?   @db.VarChar
  created_at             DateTime  @db.Timestamp(6)
  updated_at             DateTime  @db.Timestamp(6)
}

model multiple_groups {
  id             BigInt        @id @default(autoincrement())
  created_at     DateTime      @db.Timestamp(6)
  updated_at     DateTime      @db.Timestamp(6)
  artist_id      BigInt?
  compilation_id BigInt?
  name           String?       @db.VarChar
  artists        artists?      @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_f926097151")
  compilations   compilations? @relation(fields: [compilation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_a1b7d4fcfc")
  nfts           nfts[]

  @@index([artist_id], map: "index_multiple_groups_on_artist_id")
  @@index([compilation_id], map: "index_multiple_groups_on_compilation_id")
}

model music_genres {
  id          BigInt    @id @default(autoincrement())
  value       String?   @db.VarChar
  picture_key String?   @db.VarChar
  rank        Int       @default(0)
  created_at  DateTime  @db.Timestamp(6)
  updated_at  DateTime  @db.Timestamp(6)
  artists     artists[]
}

model nfts {
  id                              BigInt                        @id @default(autoincrement())
  title                           String?                       @db.VarChar
  description                     String?
  private                         Boolean?                      @default(false)
  category                        String?                       @db.VarChar
  edition_of                      String?                       @db.VarChar
  image_url                       String?                       @db.VarChar
  media_format                    String?                       @db.VarChar
  token_id                        BigInt
  artist_id                       BigInt
  user_id                         BigInt?
  created_at                      DateTime                      @db.Timestamp(6)
  updated_at                      DateTime                      @db.Timestamp(6)
  audio_url                       String?                       @db.VarChar
  multiple_group_id               BigInt?
  bolero_royalty                  Float                         @default(2.5)
  token_uri                       String?                       @db.VarChar
  price                           String?                       @db.VarChar
  collection_id                   BigInt?
  visual_type                     String?                       @db.VarChar
  home_featured                   Boolean?                      @default(false)
  compilation_id                  BigInt?
  collection_token_id             BigInt?
  collection_version_and_token_id String?                       @db.VarChar
  agreement_url                   String?                       @db.VarChar
  version                         Int?
  version_and_token_id            String                        @unique(map: "index_nfts_on_version_and_token_id") @db.VarChar
  slug                            String?                       @unique(map: "index_nfts_on_slug") @db.VarChar
  multiple_name                   String?                       @db.VarChar
  artists                         artists                       @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_6b3b0a74cc")
  collections                     collections?                  @relation(fields: [collection_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_cf93ccf032")
  compilations                    compilations?                 @relation(fields: [compilation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_8a2d3a58dc")
  multiple_groups                 multiple_groups?              @relation(fields: [multiple_group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_8c75924485")
  users                           users?                        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_c7253b9bb8")
  deprecated_nft_transactions     deprecated_nft_transactions[]

  @@index([artist_id], map: "index_nfts_on_artist_id")
  @@index([collection_id], map: "index_nfts_on_collection_id")
  @@index([collection_version_and_token_id], map: "index_nfts_on_collection_version_and_token_id")
  @@index([compilation_id], map: "index_nfts_on_compilation_id")
  @@index([multiple_group_id], map: "index_nfts_on_multiple_group_id")
  @@index([user_id], map: "index_nfts_on_user_id")
}

model notifications {
  id           BigInt    @id @default(autoincrement())
  recipient_id BigInt?
  actor_id     BigInt?
  read_at      DateTime? @db.Timestamp(6)
  action       String?   @db.VarChar
  created_at   DateTime  @db.Timestamp(6)
  updated_at   DateTime  @db.Timestamp(6)
  actor_type   String?   @db.VarChar
  path         String?   @db.VarChar
  message      Json?     @default("{}") @db.Json
  v_one        Boolean?  @default(false)
  icon_name    String?   @db.VarChar
  following    Boolean?  @default(false)
  users        users?    @relation(fields: [recipient_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_4aea6afa11")

  @@index([actor_id, actor_type], map: "index_notifications_on_actor_id_and_actor_type")
  @@index([recipient_id], map: "index_notifications_on_recipient_id")
}

model offchain_transactions {
  id                       BigInt             @id @default(autoincrement())
  token_count              String             @db.VarChar
  value_in_usdc            Float              @default(1.0)
  token_symbol             String             @db.VarChar
  transformed_to_bc_tx     Boolean            @default(false)
  in_vault                 Boolean            @default(false)
  artist_id                BigInt
  user_id                  BigInt?
  created_at               DateTime           @db.Timestamp(6)
  updated_at               DateTime           @db.Timestamp(6)
  country_code             String?            @db.VarChar
  discount_id              BigInt?
  user_reward_task_id      BigInt?
  tx_hash_from_gift_sender String?            @db.VarChar
  sent_at                  DateTime?          @db.Timestamp(6)
  user_destroyed           Boolean            @default(false)
  blockchain_status        String?            @db.VarChar
  second_tx_hash           String?            @db.VarChar
  user_email               String?            @db.VarChar
  user_wallet_address      String?            @db.VarChar
  user_level_id            BigInt?
  artists                  artists            @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_2ce3066e30")
  discounts                discounts?         @relation(fields: [discount_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_3a7b40be48")
  users                    users?             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_adb769f9c6")
  user_levels              user_levels?       @relation(fields: [user_level_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_6af944bdcf")
  user_reward_tasks        user_reward_tasks? @relation(fields: [user_reward_task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_c3425bcc64")

  @@index([artist_id], map: "index_offchain_transactions_on_artist_id")
  @@index([discount_id], map: "index_offchain_transactions_on_discount_id")
  @@index([user_id], map: "index_offchain_transactions_on_user_id")
  @@index([user_reward_task_id], map: "index_offchain_transactions_on_user_reward_task_id")
  @@index([user_level_id], map: "index_offchain_transactions_on_user_level_id")
}

model package_update_bc_prices {
  id               BigInt             @id @default(autoincrement())
  created_at       DateTime           @db.Timestamp(6)
  updated_at       DateTime           @db.Timestamp(6)
  update_bc_prices update_bc_prices[]
}

model perks {
  id           BigInt       @id @default(autoincrement())
  name         String?      @db.VarChar
  description  String?
  created_at   DateTime     @db.Timestamp(6)
  updated_at   DateTime     @db.Timestamp(6)
  stage_id     BigInt
  hidden_link  String?      @db.VarChar
  remaining    Int?
  total_supply Int?
  stages       stages       @relation(fields: [stage_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_dcc856d924")
  user_perks   user_perks[]

  @@index([stage_id], map: "index_perks_on_stage_id")
}

model quick_searches {
  id           BigInt   @id @default(autoincrement())
  filter_value String   @db.VarChar
  filter_type  String   @db.VarChar
  count        BigInt
  created_at   DateTime @db.Timestamp(6)
  updated_at   DateTime @db.Timestamp(6)

  @@unique([filter_value, filter_type], map: "unique_index_quick_search")
}

model requested_artists {
  id          BigInt   @id @default(autoincrement())
  name        String?  @db.VarChar
  spotify_url String?  @db.VarChar
  user_id     BigInt?
  created_at  DateTime @db.Timestamp(6)
  updated_at  DateTime @db.Timestamp(6)
  votes_count BigInt?  @default(0)
  spotify_id  String?  @db.VarChar

  @@index([user_id], map: "index_requested_artists_on_user_id")
}

model reward_tasks {
  id                        BigInt              @id @default(autoincrement())
  fr_title                  String              @db.VarChar
  en_title                  String              @db.VarChar
  fr_description            String              @db.VarChar
  en_description            String              @db.VarChar
  link                      String?             @db.VarChar
  rank                      Int?
  created_at                DateTime            @db.Timestamp(6)
  updated_at                DateTime            @db.Timestamp(6)
  illimited                 Boolean?            @default(false)
  points                    Int?
  percentage_of_transaction Int?
  slug                      String?             @unique(map: "index_reward_tasks_on_slug") @db.VarChar
  user_reward_tasks         user_reward_tasks[]
}

model schema_migrations {
  version String @id @db.VarChar
}

model sell_offers {
  id                            BigInt   @id @default(autoincrement())
  sell_counter                  BigInt
  seller_wallet_address         String   @db.VarChar
  want_address                  String   @db.VarChar
  want_token_symbol             String   @db.VarChar
  price                         String   @db.VarChar
  status                        String   @db.VarChar
  tx_hash                       String   @db.VarChar
  nft_token_id                  BigInt?
  created_at                    DateTime @db.Timestamp(6)
  updated_at                    DateTime @db.Timestamp(6)
  version                       Int
  version_and_counter           String   @unique(map: "index_sell_offers_on_version_and_counter") @db.VarChar
  nft_version_and_token_id      String?  @db.VarChar
  share_token_id                BigInt?
  share_bc_version_and_token_id String?  @db.VarChar
  primary_market                Boolean  @default(true)
  active                        Boolean? @default(true)
  shares                        shares?  @relation(fields: [share_bc_version_and_token_id], references: [bc_version_and_token_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_5e9f006b06")

  @@index([nft_version_and_token_id], map: "index_sell_offers_on_nft_version_and_token_id")
  @@index([seller_wallet_address], map: "index_sell_offers_on_seller_wallet_address")
  @@index([share_bc_version_and_token_id], map: "index_sell_offers_on_share_bc_version_and_token_id")
}

model splitter_beneficiaries {
  id                     BigInt           @id @default(autoincrement())
  email                  String           @db.VarChar
  stripe_id              String?          @db.VarChar
  payouts_enabled        Boolean          @default(false)
  stripe_login_link      String?          @db.VarChar
  stripe_onboarding_link String?          @db.VarChar
  shares                 Float?
  wallet_address         String?          @db.VarChar
  stripe_splitter_id     BigInt
  user_id                BigInt?
  created_at             DateTime         @db.Timestamp(6)
  updated_at             DateTime         @db.Timestamp(6)
  default_currency       String?          @db.VarChar
  in_splitter            Boolean?         @default(false)
  language               String?          @default("en") @db.VarChar
  country                String           @db.VarChar
  stripe_splitters       stripe_splitters @relation(fields: [stripe_splitter_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_ce3f81b6ab")
  users                  users?           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_3a702a8866")

  @@index([stripe_splitter_id], map: "index_splitter_beneficiaries_on_stripe_splitter_id")
  @@index([user_id], map: "index_splitter_beneficiaries_on_user_id")
}

model stage_members {
  id         BigInt       @id @default(autoincrement())
  user_id    BigInt?
  stage_id   BigInt
  created_at DateTime     @db.Timestamp(6)
  updated_at DateTime     @db.Timestamp(6)
  old        Boolean?     @default(false)
  stages     stages       @relation(fields: [stage_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_5a6b228441")
  users      users?       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_aff22d9c29")
  user_perks user_perks[]

  @@index([stage_id], map: "index_stage_members_on_stage_id")
  @@index([user_id], map: "index_stage_members_on_user_id")
}

model stages {
  id               BigInt          @id @default(autoincrement())
  created_at       DateTime        @db.Timestamp(6)
  updated_at       DateTime        @db.Timestamp(6)
  number_of_tokens Float
  artist_id        BigInt?
  customed_message String?         @db.VarChar
  activated_at     DateTime?       @db.Timestamp(6)
  disabled         Boolean?        @default(false)
  perks            perks[]
  stage_members    stage_members[]

  @@index([artist_id], map: "index_stages_on_artist_id")
}

model stripe_payment_methods {
  id                BigInt   @id @default(autoincrement())
  cardholder_name   String?  @db.VarChar
  brand             String?  @db.VarChar
  exp_month         Int?
  exp_year          Int?
  last4             String?  @db.VarChar
  payment_method_id String?  @db.VarChar
  user_id           BigInt
  created_at        DateTime @db.Timestamp(6)
  updated_at        DateTime @db.Timestamp(6)
  users             users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_7959c87bfe")

  @@index([user_id], map: "index_stripe_payment_methods_on_user_id")
}

model stripe_splitters {
  id                     BigInt                   @id @default(autoincrement())
  active                 Boolean                  @default(false)
  artist_id              BigInt
  created_at             DateTime                 @db.Timestamp(6)
  updated_at             DateTime                 @db.Timestamp(6)
  artist_shares          Float                    @default(100.0)
  artists                artists                  @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_3164de0155")
  splitter_beneficiaries splitter_beneficiaries[]

  @@index([artist_id], map: "index_stripe_splitters_on_artist_id")
}

model stripe_transactions {
  id                                    BigInt                      @id @default(autoincrement())
  artist_id                             BigInt?
  total_price_cents                     Int
  price_without_fees_cents              Int
  token_count                           String?                     @db.VarChar
  artist_earnings_cents                 Int
  stripe_status                         String?                     @db.VarChar
  payment_intent_secret                 String?                     @unique(map: "index_stripe_transactions_on_payment_intent_secret") @db.VarChar
  transformed_to_blockchain_tx          Boolean?                    @default(false)
  created_at                            DateTime                    @db.Timestamp(6)
  updated_at                            DateTime                    @db.Timestamp(6)
  status                                String?                     @db.VarChar
  in_vault                              Boolean?                    @default(false)
  country_code                          String?                     @db.VarChar
  with_email                            Boolean?                    @default(true)
  total_price_cents_in_euros            Int?
  price_without_fees_cents_in_euros     Int?
  deprecated                            Boolean                     @default(false)
  shares_version                        Int?
  is_song_share                         Boolean?                    @default(false)
  shares_tx_hashes_from_swap            String?                     @db.VarChar
  shares_tx_hashes_from_vault           String?                     @db.VarChar
  bc_transfer_date                      DateTime?                   @db.Timestamp(6)
  shares_count                          Int?
  song_id                               BigInt?
  shares_token_ids_in_vault             String?                     @db.VarChar
  shares_token_ids_in_wallet            String?                     @db.VarChar
  discount_id                           BigInt?
  price_without_discount_and_fees_cents Float
  buyer_type                            String?                     @db.VarChar
  buyer_id                              BigInt?
  artists                               artists?                    @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_7bf178d15d")
  discounts                             discounts?                  @relation(fields: [discount_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_510b51a0c2")
  songs                                 songs?                      @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_a6581c560e")
  bc_transfer_packages                  bc_transfer_packages[]
  referral_shares                       referral_shares[]
  stripe_transaction_shares             stripe_transaction_shares[]
  user_levels                           user_levels[]

  @@index([artist_id], map: "index_stripe_transactions_on_artist_id")
  @@index([song_id], map: "index_stripe_transactions_on_song_id")
  @@index([discount_id], map: "index_stripe_transactions_on_discount_id")
  @@index([buyer_type, buyer_id], map: "index_stripe_transactions_on_buyer")
}

model token_prices {
  id            BigInt   @id @default(autoincrement())
  raw_price     String   @db.VarChar
  rounded_price Float
  artist_id     BigInt
  created_at    DateTime @db.Timestamp(6)
  updated_at    DateTime @db.Timestamp(6)
  artists       artists  @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_81f67573ce")

  @@index([artist_id], map: "index_token_prices_on_artist_id")
}

model transfer_groups {
  id                BigInt    @id @default(autoincrement())
  uuid              String?   @db.VarChar
  transferred       Boolean?
  transferred_at    DateTime? @db.Timestamp(6)
  created_at        DateTime  @db.Timestamp(6)
  updated_at        DateTime  @db.Timestamp(6)
  payment_intent_id String?   @db.VarChar
}

model update_bc_prices {
  id                         BigInt                   @id @default(autoincrement())
  tx                         String                   @db.VarChar
  status                     String                   @default("in_progress") @db.VarChar
  failure_last_retry         DateTime?                @db.Timestamp(6)
  artist_id                  BigInt
  created_at                 DateTime                 @db.Timestamp(6)
  updated_at                 DateTime                 @db.Timestamp(6)
  package_update_bc_price_id BigInt
  failures_count             Int?
  gas_price                  String?                  @db.VarChar
  artists                    artists                  @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_012307442f")
  package_update_bc_prices   package_update_bc_prices @relation(fields: [package_update_bc_price_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_0af8fbd199")

  @@index([artist_id], map: "index_update_bc_prices_on_artist_id")
  @@index([package_update_bc_price_id], map: "index_update_bc_prices_on_package_update_bc_price_id")
}

model user_perks {
  id               BigInt        @id @default(autoincrement())
  delivered        Boolean?      @default(false)
  stage_member_id  BigInt
  created_at       DateTime      @db.Timestamp(6)
  updated_at       DateTime      @db.Timestamp(6)
  name             String?       @db.VarChar
  description      String?       @db.VarChar
  artist_id        BigInt
  user_id          BigInt?
  link             String?       @db.VarChar
  delivered_at     DateTime?     @db.Timestamp(6)
  perk_id          BigInt?
  user_email       String?       @db.VarChar
  user_picture_key String?       @db.VarChar
  artists          artists       @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_a10f605de3")
  perks            perks?        @relation(fields: [perk_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_14e632ba21")
  stage_members    stage_members @relation(fields: [stage_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_bd41073bf3")
  users            users?        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_3a08148acf")

  @@index([artist_id], map: "index_user_perks_on_artist_id")
  @@index([perk_id], map: "index_user_perks_on_perk_id")
  @@index([stage_member_id], map: "index_user_perks_on_stage_member_id")
  @@index([user_id], map: "index_user_perks_on_user_id")
}

model user_reward_tasks {
  id                    BigInt                  @id @default(autoincrement())
  completed             Boolean                 @default(false)
  completed_at          DateTime?               @db.Timestamp(6)
  user_id               BigInt
  reward_task_id        BigInt
  created_at            DateTime                @db.Timestamp(6)
  updated_at            DateTime                @db.Timestamp(6)
  claimed               Boolean                 @default(false)
  distributed           Boolean                 @default(false)
  progress_percentage   Int?                    @default(0)
  reward_tasks          reward_tasks            @relation(fields: [reward_task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_a4d90930ee")
  users                 users                   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_a0ba8071c5")
  offchain_transactions offchain_transactions[]

  @@index([reward_task_id], map: "index_user_reward_tasks_on_reward_task_id")
  @@index([user_id], map: "index_user_reward_tasks_on_user_id")
}

model users {
  id                                                      BigInt                          @id @default(autoincrement())
  email                                                   String                          @unique(map: "index_users_on_email") @default("") @db.VarChar
  encrypted_password                                      String                          @default("") @db.VarChar
  reset_password_token                                    String?                         @unique(map: "index_users_on_reset_password_token") @db.VarChar
  reset_password_sent_at                                  DateTime?                       @db.Timestamp(6)
  remember_created_at                                     DateTime?                       @db.Timestamp(6)
  created_at                                              DateTime                        @db.Timestamp(6)
  updated_at                                              DateTime                        @db.Timestamp(6)
  first_name                                              String?                         @db.VarChar
  last_name                                               String?                         @db.VarChar
  birth_date                                              DateTime?                       @db.Date
  confirmation_token                                      String?                         @unique(map: "index_users_on_confirmation_token") @db.VarChar
  confirmed_at                                            DateTime?                       @db.Timestamp(6)
  confirmation_sent_at                                    DateTime?                       @db.Timestamp(6)
  unconfirmed_email                                       String?                         @db.VarChar
  admin                                                   Boolean?                        @default(false)
  stripe_id                                               String?                         @db.VarChar
  artist_role                                             Boolean?                        @default(false)
  referral_code                                           String?                         @db.VarChar
  referred_by_id                                          Int?
  referral_completed_at                                   DateTime?                       @db.Timestamp(6)
  default_currency                                        String?                         @db.VarChar
  locale                                                  String?                         @default("en") @db.VarChar
  username                                                String?                         @db.VarChar
  slug                                                    String?                         @unique(map: "index_users_on_slug") @db.VarChar
  wallet_address                                          String?                         @db.VarChar
  connected_wallet_once                                   Boolean?                        @default(false)
  received_tokens_from_olds_txs                           Boolean?                        @default(false)
  charges_enabled                                         Boolean?                        @default(false)
  can_accept_card_payment                                 Boolean?                        @default(false)
  intercom_hash                                           String?                         @db.VarChar
  sign_in_count                                           Int                             @default(0)
  current_sign_in_at                                      DateTime?                       @db.Timestamp(6)
  last_sign_in_at                                         DateTime?                       @db.Timestamp(6)
  current_sign_in_ip                                      String?                         @db.VarChar
  last_sign_in_ip                                         String?                         @db.VarChar
  country_code                                            String?                         @db.VarChar
  discord_username                                        String?                         @db.VarChar
  admin_permissions                                       String[]                        @db.VarChar
  provider                                                String                          @default("email") @db.VarChar
  uid                                                     String                          @default("") @db.VarChar
  tokens                                                  Json?                           @db.Json
  allow_password_change                                   Boolean?                        @default(false)
  phone_number                                            String?                         @db.VarChar
  finished_stripe_onboarding                              Boolean                         @default(false)
  used_referral_code                                      Boolean                         @default(false)
  default_profile_picture_key                             String?                         @db.VarChar
  default_cover_picture_key                               String?                         @db.VarChar
  stripe_customer_id                                      String?                         @db.VarChar
  instagram_username                                      String?                         @db.VarChar
  banned                                                  Boolean?                        @default(false)
  completed_all_reward_tasks                              Boolean?                        @default(false)
  user_levels_id                                          BigInt?
  description                                             String?                         @default("") @db.VarChar
  twitter_username                                        String?                         @db.VarChar
  tiktok_username                                         String?                         @db.VarChar
  connected_wallet_on_v2                                  Boolean                         @default(false)
  with_bolero_wallet                                      Boolean                         @default(false)
  usertextsearchable_index_col                            Unsupported("tsvector")?
  tk_sub_org_id                                           String?                         @db.VarChar
  tk_pk_id                                                String?                         @db.VarChar
  is_bolero_coworker                                      Boolean?                        @default(false)
  is_beta_tester                                          Boolean                         @default(false)
  is_marketting_partner                                   Boolean                         @default(false)
  user_levels_user_levelsTousers_user_levels_id           user_levels?                    @relation("user_levelsTousers_user_levels_id", fields: [user_levels_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_2d0996a61f")
  artists                                                 artists[]
  banned_ip_addresses                                     banned_ip_addresses[]
  bid_offers                                              bid_offers[]
  blockchain_users                                        blockchain_users[]
  currencies                                              currencies[]
  deprecated_nft_transactions                             deprecated_nft_transactions[]
  deprecated_token_transactions                           deprecated_token_transactions[]
  discounts                                               discounts[]
  early_access_list_users                                 early_access_list_users[]
  last_user_visits                                        last_user_visits[]
  nfts                                                    nfts[]
  notifications                                           notifications[]
  offchain_transactions                                   offchain_transactions[]
  old_transactions                                        old_transactions[]
  partnerships                                            partnerships[]
  points                                                  points[]
  presales                                                presales[]
  referral_shares_referral_shares_referred_user_idTousers referral_shares[]               @relation("referral_shares_referred_user_idTousers")
  referral_shares_referral_shares_user_idTousers          referral_shares[]               @relation("referral_shares_user_idTousers")
  rewinds                                                 rewinds[]
  song_likes                                              song_likes[]
  song_wallet_details                                     song_wallet_details[]
  splitter_beneficiaries                                  splitter_beneficiaries[]
  stage_members                                           stage_members[]
  stripe_payment_methods                                  stripe_payment_methods[]
  token_refunds                                           token_refunds[]
  user_levels_user_levels_user_idTousers                  user_levels[]                   @relation("user_levels_user_idTousers")
  user_merchandises                                       user_merchandises[]
  user_perks                                              user_perks[]
  user_reward_tasks                                       user_reward_tasks[]

  @@unique([uid, provider], map: "index_users_on_uid_and_provider")
  @@index([wallet_address], map: "index_users_on_wallet_address")
  @@index([usertextsearchable_index_col], map: "usertextsearchable_idx")
  @@index([usertextsearchable_index_col], map: "usertextsearchable_index")
  @@index([user_levels_id], map: "index_users_on_user_levels_id")
}

model votes {
  id                  BigInt   @id @default(autoincrement())
  user_id             BigInt?
  requested_artist_id BigInt?
  created_at          DateTime @db.Timestamp(6)
  updated_at          DateTime @db.Timestamp(6)

  @@index([requested_artist_id], map: "index_votes_on_requested_artist_id")
  @@index([user_id], map: "index_votes_on_user_id")
}

model wallet_details {
  id          BigInt   @id @default(autoincrement())
  date        String?  @db.VarChar
  total_value String?  @db.VarChar
  details     Json?    @default(dbgenerated("'{}'::json"))
  user_id     BigInt?
  created_at  DateTime @db.Timestamp(6)
  updated_at  DateTime @db.Timestamp(6)

  @@index([user_id], map: "index_wallet_details_on_user_id")
}

model activity {
  id          Int        @id @default(autoincrement())
  topic       String     @db.VarChar(32)
  timestamp   DateTime   @db.Timestamptz(6)
  user_id     Int?
  model       String?    @db.VarChar(16)
  model_id    Int?
  database_id Int?
  table_id    Int?
  custom_id   String?    @db.VarChar(48)
  details     String
  core_user   core_user? @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_activity_ref_user_id")

  @@index([custom_id], map: "idx_activity_custom_id")
  @@index([timestamp], map: "idx_activity_timestamp")
  @@index([user_id], map: "idx_activity_user_id")
}

model application_permissions_revision {
  id         Int       @id(map: "general_permissions_revision_pkey") @default(autoincrement())
  before     String
  after      String
  user_id    Int
  created_at DateTime  @db.Timestamp(6)
  remark     String?
  core_user  core_user @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_general_permissions_revision_user_id")
}

model banned_ip_addresses {
  id         BigInt   @id @default(autoincrement())
  address    String   @db.VarChar
  user_id    BigInt?
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
  users      users?   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_e9a916c173")

  @@index([user_id], map: "index_banned_ip_addresses_on_user_id")
}

model bookmark_ordering {
  id        Int       @id @default(autoincrement())
  user_id   Int
  type      String    @db.VarChar(255)
  item_id   Int
  ordering  Int
  core_user core_user @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_bookmark_ordering_user_id")

  @@unique([user_id, ordering], map: "unique_bookmark_user_id_ordering")
  @@unique([user_id, type, item_id], map: "unique_bookmark_user_id_type_item_id")
  @@index([user_id], map: "idx_bookmark_ordering_user_id")
}

model card_bookmark {
  id          Int         @id @default(autoincrement())
  user_id     Int
  card_id     Int
  created_at  DateTime    @default(now()) @db.Timestamptz(6)
  report_card report_card @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_card_bookmark_dashboard_id")
  core_user   core_user   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_card_bookmark_user_id")

  @@unique([user_id, card_id], map: "unique_card_bookmark_user_id_card_id")
  @@index([card_id], map: "idx_card_bookmark_card_id")
  @@index([user_id], map: "idx_card_bookmark_user_id")
}

model card_label {
  id          Int         @id @default(autoincrement())
  card_id     Int
  label_id    Int
  report_card report_card @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_card_label_ref_card_id")
  label       label       @relation(fields: [label_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_card_label_ref_label_id")

  @@unique([card_id, label_id], map: "unique_card_label_card_id_label_id")
  @@index([card_id], map: "idx_card_label_card_id")
  @@index([label_id], map: "idx_card_label_label_id")
}

model certifications {
  id                BigInt    @id @default(autoincrement())
  song_id           BigInt
  name              String?   @db.VarChar
  country           String?   @db.VarChar
  organization_name String?   @db.VarChar
  created_at        DateTime  @db.Timestamp(6)
  updated_at        DateTime  @db.Timestamp(6)
  date              DateTime? @db.Date
  songs             songs     @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_2e7503551c")

  @@index([song_id], map: "index_certifications_on_song_id")
}

model collection {
  id                   Int                    @id @default(autoincrement())
  name                 String
  description          String?
  color                String                 @db.Char(7)
  archived             Boolean                @default(false)
  location             String                 @default("/") @db.VarChar(254)
  personal_owner_id    Int?                   @unique(map: "unique_collection_personal_owner_id")
  slug                 String                 @db.VarChar(254)
  namespace            String?                @db.VarChar(254)
  authority_level      String?                @db.VarChar(255)
  entity_id            String?                @unique @db.Char(21)
  core_user            core_user?             @relation(fields: [personal_owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_collection_personal_owner_id")
  collection_bookmark  collection_bookmark[]
  native_query_snippet native_query_snippet[]
  pulse                pulse[]
  report_card          report_card[]
  report_dashboard     report_dashboard[]
  timeline             timeline[]

  @@index([location], map: "idx_collection_location")
  @@index([personal_owner_id], map: "idx_collection_personal_owner_id")
}

model collection_bookmark {
  id            Int        @id @default(autoincrement())
  user_id       Int
  collection_id Int
  created_at    DateTime   @default(now()) @db.Timestamptz(6)
  collection    collection @relation(fields: [collection_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_collection_bookmark_collection_id")
  core_user     core_user  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_collection_bookmark_user_id")

  @@unique([user_id, collection_id], map: "unique_collection_bookmark_user_id_collection_id")
  @@index([collection_id], map: "idx_collection_bookmark_collection_id")
  @@index([user_id], map: "idx_collection_bookmark_user_id")
}

model collection_permission_graph_revision {
  id         Int       @id(map: "collection_revision_pkey") @default(autoincrement())
  before     String
  after      String
  user_id    Int
  created_at DateTime  @db.Timestamp(6)
  remark     String?
  core_user  core_user @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_collection_revision_user_id")
}

model computation_job {
  id                     Int                      @id @default(autoincrement())
  creator_id             Int?
  created_at             DateTime                 @db.Timestamp(6)
  updated_at             DateTime                 @db.Timestamp(6)
  type                   String                   @db.VarChar(254)
  status                 String                   @db.VarChar(254)
  context                String?
  ended_at               DateTime?                @db.Timestamp(6)
  core_user              core_user?               @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_computation_job_ref_user_id")
  computation_job_result computation_job_result[]
}

model computation_job_result {
  id              Int             @id @default(autoincrement())
  job_id          Int
  created_at      DateTime        @db.Timestamp(6)
  updated_at      DateTime        @db.Timestamp(6)
  permanence      String          @db.VarChar(254)
  payload         String
  computation_job computation_job @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_computation_result_ref_job_id")
}

model core_session {
  id              String          @id @db.VarChar(254)
  user_id         Int
  created_at      DateTime        @db.Timestamptz(6)
  anti_csrf_token String?
  core_user       core_user       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_session_ref_user_id")
  login_history   login_history[]
}

model core_user {
  id                                                             Int                                    @id @default(autoincrement())
  email                                                          String                                 @unique @db.Citext
  first_name                                                     String?                                @db.VarChar(254)
  last_name                                                      String?                                @db.VarChar(254)
  password                                                       String?                                @db.VarChar(254)
  password_salt                                                  String?                                @default("default") @db.VarChar(254)
  date_joined                                                    DateTime                               @db.Timestamptz(6)
  last_login                                                     DateTime?                              @db.Timestamptz(6)
  is_superuser                                                   Boolean                                @default(false)
  is_active                                                      Boolean                                @default(true)
  reset_token                                                    String?                                @db.VarChar(254)
  reset_triggered                                                BigInt?
  is_qbnewb                                                      Boolean                                @default(true)
  google_auth                                                    Boolean                                @default(false)
  ldap_auth                                                      Boolean                                @default(false)
  login_attributes                                               String?
  updated_at                                                     DateTime?                              @db.Timestamp(6)
  sso_source                                                     String?                                @db.VarChar(254)
  locale                                                         String?                                @db.VarChar(5)
  is_datasetnewb                                                 Boolean                                @default(true)
  settings                                                       String?
  activity                                                       activity[]
  application_permissions_revision                               application_permissions_revision[]
  bookmark_ordering                                              bookmark_ordering[]
  card_bookmark                                                  card_bookmark[]
  collection                                                     collection?
  collection_bookmark                                            collection_bookmark[]
  collection_permission_graph_revision                           collection_permission_graph_revision[]
  computation_job                                                computation_job[]
  core_session                                                   core_session[]
  dashboard_bookmark                                             dashboard_bookmark[]
  dashboard_favorite                                             dashboard_favorite[]
  login_history                                                  login_history[]
  metabase_database                                              metabase_database[]
  metric                                                         metric[]
  native_query_snippet                                           native_query_snippet[]
  permissions_group_membership                                   permissions_group_membership[]
  permissions_revision                                           permissions_revision[]
  persisted_info                                                 persisted_info[]
  pulse                                                          pulse[]
  pulse_channel_recipient                                        pulse_channel_recipient[]
  report_card_core_userToreport_card_creator_id                  report_card[]                          @relation("core_userToreport_card_creator_id")
  report_card_core_userToreport_card_made_public_by_id           report_card[]                          @relation("core_userToreport_card_made_public_by_id")
  report_cardfavorite                                            report_cardfavorite[]
  report_dashboard_core_userToreport_dashboard_creator_id        report_dashboard[]                     @relation("core_userToreport_dashboard_creator_id")
  report_dashboard_core_userToreport_dashboard_made_public_by_id report_dashboard[]                     @relation("core_userToreport_dashboard_made_public_by_id")
  revision                                                       revision[]
  secret                                                         secret[]
  segment                                                        segment[]
  timeline                                                       timeline[]
  timeline_event                                                 timeline_event[]
  view_log                                                       view_log[]
}

model dashboard_bookmark {
  id               Int              @id @default(autoincrement())
  user_id          Int
  dashboard_id     Int
  created_at       DateTime         @default(now()) @db.Timestamptz(6)
  report_dashboard report_dashboard @relation(fields: [dashboard_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_dashboard_bookmark_dashboard_id")
  core_user        core_user        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_dashboard_bookmark_user_id")

  @@unique([user_id, dashboard_id], map: "unique_dashboard_bookmark_user_id_dashboard_id")
  @@index([dashboard_id], map: "idx_dashboard_bookmark_dashboard_id")
  @@index([user_id], map: "idx_dashboard_bookmark_user_id")
}

model dashboard_favorite {
  id               Int              @id @default(autoincrement())
  user_id          Int
  dashboard_id     Int
  report_dashboard report_dashboard @relation(fields: [dashboard_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_dashboard_favorite_dashboard_id")
  core_user        core_user        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_dashboard_favorite_user_id")

  @@unique([user_id, dashboard_id], map: "unique_dashboard_favorite_user_id_dashboard_id")
  @@index([dashboard_id], map: "idx_dashboard_favorite_dashboard_id")
  @@index([user_id], map: "idx_dashboard_favorite_user_id")
}

model dashboardcard_series {
  id                   Int                  @id @default(autoincrement())
  dashboardcard_id     Int
  card_id              Int
  position             Int
  report_card          report_card          @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_dashboardcard_series_ref_card_id")
  report_dashboardcard report_dashboardcard @relation(fields: [dashboardcard_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_dashboardcard_series_ref_dashboardcard_id")

  @@index([card_id], map: "idx_dashboardcard_series_card_id")
  @@index([dashboardcard_id], map: "idx_dashboardcard_series_dashboardcard_id")
}

model data_migrations {
  id        String   @id @db.VarChar(254)
  timestamp DateTime @db.Timestamp(6)

  @@index([id], map: "idx_data_migrations_id")
}

model databasechangelog {
  id            String   @db.VarChar(255)
  author        String   @db.VarChar(255)
  filename      String   @db.VarChar(255)
  dateexecuted  DateTime @db.Timestamp(6)
  orderexecuted Int
  exectype      String   @db.VarChar(10)
  md5sum        String?  @db.VarChar(35)
  description   String?  @db.VarChar(255)
  comments      String?  @db.VarChar(255)
  tag           String?  @db.VarChar(255)
  liquibase     String?  @db.VarChar(20)
  contexts      String?  @db.VarChar(255)
  labels        String?  @db.VarChar(255)
  deployment_id String?  @db.VarChar(10)

  @@unique([id, author, filename], map: "idx_databasechangelog_id_author_filename")
}

model databasechangeloglock {
  id          Int       @id
  locked      Boolean
  lockgranted DateTime? @db.Timestamp(6)
  lockedby    String?   @db.VarChar(255)
}

model dependency {
  id                 Int      @id @default(autoincrement())
  model              String   @db.VarChar(32)
  model_id           Int
  dependent_on_model String   @db.VarChar(32)
  dependent_on_id    Int
  created_at         DateTime @db.Timestamptz(6)

  @@index([dependent_on_id], map: "idx_dependency_dependent_on_id")
  @@index([dependent_on_model], map: "idx_dependency_dependent_on_model")
  @@index([model], map: "idx_dependency_model")
  @@index([model_id], map: "idx_dependency_model_id")
}

model dimension {
  id                                                               Int             @id @default(autoincrement())
  field_id                                                         Int
  name                                                             String          @db.VarChar(254)
  type                                                             String          @db.VarChar(254)
  human_readable_field_id                                          Int?
  created_at                                                       DateTime        @db.Timestamp(6)
  updated_at                                                       DateTime        @db.Timestamp(6)
  entity_id                                                        String?         @unique @db.Char(21)
  metabase_field_dimension_field_idTometabase_field                metabase_field  @relation("dimension_field_idTometabase_field", fields: [field_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_dimension_ref_field_id")
  metabase_field_dimension_human_readable_field_idTometabase_field metabase_field? @relation("dimension_human_readable_field_idTometabase_field", fields: [human_readable_field_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_dimension_displayfk_ref_field_id")

  @@unique([field_id, name], map: "unique_dimension_field_id_name")
  @@index([field_id], map: "idx_dimension_field_id")
}

model group_table_access_policy {
  id                   Int               @id @default(autoincrement())
  group_id             Int
  table_id             Int
  card_id              Int?
  attribute_remappings String?
  report_card          report_card?      @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_gtap_card_id")
  permissions_group    permissions_group @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_gtap_group_id")
  metabase_table       metabase_table    @relation(fields: [table_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_gtap_table_id")

  @@unique([table_id, group_id], map: "unique_gtap_table_id_group_id")
  @@index([table_id, group_id], map: "idx_gtap_table_id_group_id")
}

model label {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(254)
  slug       String       @unique @db.VarChar(254)
  icon       String?      @db.VarChar(128)
  card_label card_label[]

  @@index([slug], map: "idx_label_slug")
}

model last_user_visits {
  id              BigInt    @id @default(autoincrement())
  last_connection DateTime? @db.Timestamp(6)
  visit_streak    Int?
  user_id         BigInt
  created_at      DateTime  @db.Timestamp(6)
  updated_at      DateTime  @db.Timestamp(6)
  users           users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_b47d9884ee")

  @@index([user_id], map: "index_last_user_visits_on_user_id")
}

model login_history {
  id                 Int           @id @default(autoincrement())
  timestamp          DateTime      @default(now()) @db.Timestamptz(6)
  user_id            Int
  session_id         String?       @db.VarChar(254)
  device_id          String        @db.Char(36)
  device_description String
  ip_address         String
  core_session       core_session? @relation(fields: [session_id], references: [id], onUpdate: NoAction, map: "fk_login_history_session_id")
  core_user          core_user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_login_history_user_id")

  @@index([session_id], map: "idx_session_id")
  @@index([timestamp], map: "idx_timestamp")
  @@index([user_id], map: "idx_user_id")
  @@index([session_id, device_id], map: "idx_user_id_device_id")
  @@index([user_id, timestamp], map: "idx_user_id_timestamp")
}

model metabase_database {
  id                          Int              @id @default(autoincrement())
  created_at                  DateTime         @db.Timestamptz(6)
  updated_at                  DateTime         @db.Timestamptz(6)
  name                        String           @db.VarChar(254)
  description                 String?
  details                     String?
  engine                      String           @db.VarChar(254)
  is_sample                   Boolean          @default(false)
  is_full_sync                Boolean          @default(true)
  points_of_interest          String?
  caveats                     String?
  metadata_sync_schedule      String           @default("0 50 * * * ? *") @db.VarChar(254)
  cache_field_values_schedule String           @default("0 50 0 * * ? *") @db.VarChar(254)
  timezone                    String?          @db.VarChar(254)
  is_on_demand                Boolean          @default(false)
  options                     String?
  auto_run_queries            Boolean          @default(true)
  refingerprint               Boolean?
  cache_ttl                   Int?
  initial_sync_status         String           @default("complete") @db.VarChar(32)
  creator_id                  Int?
  settings                    String?
  core_user                   core_user?       @relation(fields: [creator_id], references: [id], onUpdate: NoAction, map: "fk_database_creator_id")
  metabase_table              metabase_table[]
  persisted_info              persisted_info[]
  report_card                 report_card[]
}

model metabase_field {
  id                                                          Int                      @id @default(autoincrement())
  created_at                                                  DateTime                 @db.Timestamptz(6)
  updated_at                                                  DateTime                 @db.Timestamptz(6)
  name                                                        String                   @db.VarChar(254)
  base_type                                                   String                   @db.VarChar(255)
  semantic_type                                               String?                  @db.VarChar(255)
  active                                                      Boolean                  @default(true)
  description                                                 String?
  preview_display                                             Boolean                  @default(true)
  position                                                    Int                      @default(0)
  table_id                                                    Int
  parent_id                                                   Int?
  display_name                                                String?                  @db.VarChar(254)
  visibility_type                                             String                   @default("normal") @db.VarChar(32)
  fk_target_field_id                                          Int?
  last_analyzed                                               DateTime?                @db.Timestamptz(6)
  points_of_interest                                          String?
  caveats                                                     String?
  fingerprint                                                 String?
  fingerprint_version                                         Int                      @default(0)
  database_type                                               String
  has_field_values                                            String?
  settings                                                    String?
  database_position                                           Int                      @default(0)
  custom_position                                             Int                      @default(0)
  effective_type                                              String?                  @db.VarChar(255)
  coercion_strategy                                           String?                  @db.VarChar(255)
  nfc_path                                                    String?                  @db.VarChar(254)
  metabase_field                                              metabase_field?          @relation("metabase_fieldTometabase_field_parent_id", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_field_parent_ref_field_id")
  metabase_table                                              metabase_table           @relation(fields: [table_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_field_ref_table_id")
  dimension_dimension_field_idTometabase_field                dimension[]              @relation("dimension_field_idTometabase_field")
  dimension_dimension_human_readable_field_idTometabase_field dimension[]              @relation("dimension_human_readable_field_idTometabase_field")
  other_metabase_field                                        metabase_field[]         @relation("metabase_fieldTometabase_field_parent_id")
  metabase_fieldvalues                                        metabase_fieldvalues[]
  metric_important_field                                      metric_important_field[]

  @@unique([table_id, parent_id, name], map: "idx_uniq_field_table_id_parent_id_name")
  @@index([parent_id], map: "idx_field_parent_id")
  @@index([table_id], map: "idx_field_table_id")
}

model metabase_fieldvalues {
  id                    Int            @id @default(autoincrement())
  created_at            DateTime       @db.Timestamptz(6)
  updated_at            DateTime       @db.Timestamptz(6)
  values                String?
  human_readable_values String?
  field_id              Int
  has_more_values       Boolean?       @default(false)
  type                  String         @default("full") @db.VarChar(32)
  hash_key              String?
  metabase_field        metabase_field @relation(fields: [field_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_fieldvalues_ref_field_id")

  @@index([field_id], map: "idx_fieldvalues_field_id")
}

model metabase_table {
  id                        Int                         @id @default(autoincrement())
  created_at                DateTime                    @db.Timestamptz(6)
  updated_at                DateTime                    @db.Timestamptz(6)
  name                      String                      @db.VarChar(254)
  description               String?
  entity_type               String?                     @db.VarChar(254)
  active                    Boolean
  db_id                     Int
  display_name              String?                     @db.VarChar(254)
  visibility_type           String?                     @db.VarChar(254)
  schema                    String?                     @db.VarChar(254)
  points_of_interest        String?
  caveats                   String?
  show_in_getting_started   Boolean                     @default(false)
  field_order               String                      @default("database") @db.VarChar(254)
  initial_sync_status       String                      @default("complete") @db.VarChar(32)
  metabase_database         metabase_database           @relation(fields: [db_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_table_ref_database_id")
  group_table_access_policy group_table_access_policy[]
  metabase_field            metabase_field[]
  metric                    metric[]
  report_card               report_card[]
  segment                   segment[]

  @@unique([db_id, schema, name], map: "idx_uniq_table_db_id_schema_name")
  @@index([db_id, schema], map: "idx_metabase_table_db_id_schema")
  @@index([show_in_getting_started], map: "idx_metabase_table_show_in_getting_started")
  @@index([db_id], map: "idx_table_db_id")
}

model metric {
  id                      Int                      @id @default(autoincrement())
  table_id                Int
  creator_id              Int
  name                    String                   @db.VarChar(254)
  description             String?
  archived                Boolean                  @default(false)
  definition              String
  created_at              DateTime                 @db.Timestamptz(6)
  updated_at              DateTime                 @db.Timestamptz(6)
  points_of_interest      String?
  caveats                 String?
  how_is_this_calculated  String?
  show_in_getting_started Boolean                  @default(false)
  entity_id               String?                  @unique @db.Char(21)
  core_user               core_user                @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_metric_ref_creator_id")
  metabase_table          metabase_table           @relation(fields: [table_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_metric_ref_table_id")
  metric_important_field  metric_important_field[]

  @@index([creator_id], map: "idx_metric_creator_id")
  @@index([show_in_getting_started], map: "idx_metric_show_in_getting_started")
  @@index([table_id], map: "idx_metric_table_id")
}

model metric_important_field {
  id             Int            @id @default(autoincrement())
  metric_id      Int
  field_id       Int
  metabase_field metabase_field @relation(fields: [field_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_metric_important_field_metabase_field_id")
  metric         metric         @relation(fields: [metric_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_metric_important_field_metric_id")

  @@unique([metric_id, field_id], map: "unique_metric_important_field_metric_id_field_id")
  @@index([field_id], map: "idx_metric_important_field_field_id")
  @@index([metric_id], map: "idx_metric_important_field_metric_id")
}

model moderation_review {
  id                  Int      @id @default(autoincrement())
  updated_at          DateTime @default(now()) @db.Timestamptz(6)
  created_at          DateTime @default(now()) @db.Timestamptz(6)
  status              String?  @db.VarChar(255)
  text                String?
  moderated_item_id   Int
  moderated_item_type String   @db.VarChar(255)
  moderator_id        Int
  most_recent         Boolean

  @@index([moderated_item_type, moderated_item_id], map: "idx_moderation_review_item_type_item_id")
}

model native_query_snippet {
  id            Int         @id @default(autoincrement())
  name          String      @unique @db.VarChar(254)
  description   String?
  content       String
  creator_id    Int
  archived      Boolean     @default(false)
  created_at    DateTime    @default(now()) @db.Timestamptz(6)
  updated_at    DateTime    @default(now()) @db.Timestamptz(6)
  collection_id Int?
  entity_id     String?     @unique @db.Char(21)
  collection    collection? @relation(fields: [collection_id], references: [id], onUpdate: NoAction, map: "fk_snippet_collection_id")
  core_user     core_user   @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_snippet_creator_id")

  @@index([collection_id], map: "idx_snippet_collection_id")
  @@index([name], map: "idx_snippet_name")
}

model partnerships {
  id                              BigInt    @id @default(autoincrement())
  user_id                         BigInt?
  artist_id                       BigInt
  song_shares_first_purchase_date DateTime? @db.Timestamp(6)
  song_shares_last_purchase_date  DateTime? @db.Timestamp(6)
  song_shares_count               Int?
  song_shares_invested_value_usdc Float?
  song_shares_current_value_usdc  Float?
  tokens_first_purchase_date      DateTime? @db.Timestamp(6)
  tokens_last_purchase_date       DateTime? @db.Timestamp(6)
  tokens_count                    Float?
  tokens_invested_value_usdc      Float?
  tokens_current_value_usdc       Float?
  user_deleted                    Boolean?  @default(false)
  user_banned                     Boolean?  @default(false)
  deleted_user_username           String?   @db.VarChar
  deleted_user_email              String?   @db.VarChar
  assets_types                    String?   @db.VarChar
  created_at                      DateTime  @db.Timestamp(6)
  updated_at                      DateTime  @db.Timestamp(6)
  song_shares_total_earned        Float?
  total_tokens_invested_value     Float?
  total_songs_invested_value      Float?
  actual_owned_shares_total_value Float?
  total_shares_sold               Float?
  artists                         artists   @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_35e9f98017")
  users                           users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_a83ec63dda")

  @@unique([artist_id, user_id], map: "index_partnerships_on_artist_id_and_user_id")
  @@index([artist_id], map: "index_partnerships_on_artist_id")
  @@index([user_id], map: "index_partnerships_on_user_id")
}

model permissions {
  id                Int               @id @default(autoincrement())
  object            String            @db.VarChar(254)
  group_id          Int
  permissions_group permissions_group @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_permissions_group_id")

  @@unique([group_id, object])
  @@index([group_id], map: "idx_permissions_group_id")
  @@index([group_id, object], map: "idx_permissions_group_id_object")
  @@index([object], map: "idx_permissions_object")
}

model permissions_group {
  id                           Int                            @id @default(autoincrement())
  name                         String                         @unique(map: "unique_permissions_group_name") @db.VarChar(255)
  group_table_access_policy    group_table_access_policy[]
  permissions                  permissions[]
  permissions_group_membership permissions_group_membership[]

  @@index([name], map: "idx_permissions_group_name")
}

model permissions_group_membership {
  id                Int               @id @default(autoincrement())
  user_id           Int
  group_id          Int
  is_group_manager  Boolean           @default(false)
  permissions_group permissions_group @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_permissions_group_group_id")
  core_user         core_user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_permissions_group_membership_user_id")

  @@unique([user_id, group_id], map: "unique_permissions_group_membership_user_id_group_id")
  @@index([group_id], map: "idx_permissions_group_membership_group_id")
  @@index([group_id, user_id], map: "idx_permissions_group_membership_group_id_user_id")
  @@index([user_id], map: "idx_permissions_group_membership_user_id")
}

model permissions_revision {
  id         Int       @id @default(autoincrement())
  before     String
  after      String
  user_id    Int
  created_at DateTime  @db.Timestamp(6)
  remark     String?
  core_user  core_user @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_permissions_revision_user_id")
}

model persisted_info {
  id                Int               @id @default(autoincrement())
  database_id       Int
  card_id           Int               @unique
  question_slug     String
  table_name        String
  definition        String?
  query_hash        String?
  active            Boolean           @default(false)
  state             String
  refresh_begin     DateTime          @db.Timestamptz(6)
  refresh_end       DateTime?         @db.Timestamptz(6)
  state_change_at   DateTime?         @db.Timestamptz(6)
  error             String?
  created_at        DateTime          @default(now()) @db.Timestamptz(6)
  creator_id        Int?
  report_card       report_card       @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_persisted_info_card_id")
  core_user         core_user?        @relation(fields: [creator_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_persisted_info_ref_creator_id")
  metabase_database metabase_database @relation(fields: [database_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_persisted_info_database_id")
}

model points {
  id                    BigInt   @id @default(autoincrement())
  total_points          Float?
  earned_points         Float?
  user_id               BigInt
  created_at            DateTime @db.Timestamp(6)
  updated_at            DateTime @db.Timestamp(6)
  reward_task_id        BigInt
  multiplicator_applied Float?
  transaction_id        String?  @unique(map: "index_points_on_transaction_id") @db.VarChar
  users                 users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_206a3ea05e")

  @@index([user_id], map: "index_points_on_user_id")
  @@index([reward_task_id], map: "index_points_on_reward_task_id")
}

model pulse {
  id                  Int               @id @default(autoincrement())
  creator_id          Int
  name                String?           @db.VarChar(254)
  created_at          DateTime          @db.Timestamptz(6)
  updated_at          DateTime          @db.Timestamptz(6)
  skip_if_empty       Boolean           @default(false)
  alert_condition     String?           @db.VarChar(254)
  alert_first_only    Boolean?
  alert_above_goal    Boolean?
  collection_id       Int?
  collection_position Int?              @db.SmallInt
  archived            Boolean?          @default(false)
  dashboard_id        Int?
  parameters          String
  entity_id           String?           @unique @db.Char(21)
  collection          collection?       @relation(fields: [collection_id], references: [id], onUpdate: NoAction, map: "fk_pulse_collection_id")
  core_user           core_user         @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pulse_ref_creator_id")
  report_dashboard    report_dashboard? @relation(fields: [dashboard_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pulse_ref_dashboard_id")
  pulse_card          pulse_card[]
  pulse_channel       pulse_channel[]

  @@index([collection_id], map: "idx_pulse_collection_id")
  @@index([creator_id], map: "idx_pulse_creator_id")
}

model pulse_card {
  id                   Int                   @id @default(autoincrement())
  pulse_id             Int
  card_id              Int
  position             Int
  include_csv          Boolean               @default(false)
  include_xls          Boolean               @default(false)
  dashboard_card_id    Int?
  entity_id            String?               @unique @db.Char(21)
  report_card          report_card           @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pulse_card_ref_card_id")
  report_dashboardcard report_dashboardcard? @relation(fields: [dashboard_card_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pulse_card_ref_pulse_card_id")
  pulse                pulse                 @relation(fields: [pulse_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pulse_card_ref_pulse_id")

  @@index([card_id], map: "idx_pulse_card_card_id")
  @@index([pulse_id], map: "idx_pulse_card_pulse_id")
}

model pulse_channel {
  id                      Int                       @id @default(autoincrement())
  pulse_id                Int
  channel_type            String                    @db.VarChar(32)
  details                 String
  schedule_type           String                    @db.VarChar(32)
  schedule_hour           Int?
  schedule_day            String?                   @db.VarChar(64)
  created_at              DateTime                  @db.Timestamptz(6)
  updated_at              DateTime                  @db.Timestamptz(6)
  schedule_frame          String?                   @db.VarChar(32)
  enabled                 Boolean                   @default(true)
  entity_id               String?                   @unique @db.Char(21)
  pulse                   pulse                     @relation(fields: [pulse_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pulse_channel_ref_pulse_id")
  pulse_channel_recipient pulse_channel_recipient[]

  @@index([pulse_id], map: "idx_pulse_channel_pulse_id")
  @@index([schedule_type], map: "idx_pulse_channel_schedule_type")
}

model pulse_channel_recipient {
  id               Int           @id @default(autoincrement())
  pulse_channel_id Int
  user_id          Int
  pulse_channel    pulse_channel @relation(fields: [pulse_channel_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pulse_channel_recipient_ref_pulse_channel_id")
  core_user        core_user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pulse_channel_recipient_ref_user_id")
}

model qrtz_blob_triggers {
  sched_name    String        @db.VarChar(120)
  trigger_name  String        @db.VarChar(200)
  trigger_group String        @db.VarChar(200)
  blob_data     Bytes?
  qrtz_triggers qrtz_triggers @relation(fields: [sched_name, trigger_name, trigger_group], references: [sched_name, trigger_name, trigger_group], onDelete: NoAction, onUpdate: NoAction, map: "fk_qrtz_blob_triggers_triggers")

  @@id([sched_name, trigger_name, trigger_group], map: "pk_qrtz_blob_triggers")
}

model qrtz_calendars {
  sched_name    String @db.VarChar(120)
  calendar_name String @db.VarChar(200)
  calendar      Bytes

  @@id([sched_name, calendar_name], map: "pk_qrtz_calendars")
}

model qrtz_cron_triggers {
  sched_name      String        @db.VarChar(120)
  trigger_name    String        @db.VarChar(200)
  trigger_group   String        @db.VarChar(200)
  cron_expression String        @db.VarChar(120)
  time_zone_id    String?       @db.VarChar(80)
  qrtz_triggers   qrtz_triggers @relation(fields: [sched_name, trigger_name, trigger_group], references: [sched_name, trigger_name, trigger_group], onDelete: NoAction, onUpdate: NoAction, map: "fk_qrtz_cron_triggers_triggers")

  @@id([sched_name, trigger_name, trigger_group], map: "pk_qrtz_cron_triggers")
}

model qrtz_fired_triggers {
  sched_name        String   @db.VarChar(120)
  entry_id          String   @db.VarChar(95)
  trigger_name      String   @db.VarChar(200)
  trigger_group     String   @db.VarChar(200)
  instance_name     String   @db.VarChar(200)
  fired_time        BigInt
  sched_time        BigInt?
  priority          Int
  state             String   @db.VarChar(16)
  job_name          String?  @db.VarChar(200)
  job_group         String?  @db.VarChar(200)
  is_nonconcurrent  Boolean?
  requests_recovery Boolean?

  @@id([sched_name, entry_id], map: "pk_qrtz_fired_triggers")
  @@index([sched_name, instance_name, requests_recovery], map: "idx_qrtz_ft_inst_job_req_rcvry")
  @@index([sched_name, job_name, job_group], map: "idx_qrtz_ft_j_g")
  @@index([sched_name, job_group], map: "idx_qrtz_ft_jg")
  @@index([sched_name, trigger_name, trigger_group], map: "idx_qrtz_ft_t_g")
  @@index([sched_name, trigger_group], map: "idx_qrtz_ft_tg")
  @@index([sched_name, instance_name], map: "idx_qrtz_ft_trig_inst_name")
}

model qrtz_job_details {
  sched_name        String          @db.VarChar(120)
  job_name          String          @db.VarChar(200)
  job_group         String          @db.VarChar(200)
  description       String?         @db.VarChar(250)
  job_class_name    String          @db.VarChar(250)
  is_durable        Boolean
  is_nonconcurrent  Boolean
  is_update_data    Boolean
  requests_recovery Boolean
  job_data          Bytes?
  qrtz_triggers     qrtz_triggers[]

  @@id([sched_name, job_name, job_group], map: "pk_qrtz_job_details")
  @@index([sched_name, job_group], map: "idx_qrtz_j_grp")
  @@index([sched_name, requests_recovery], map: "idx_qrtz_j_req_recovery")
}

model qrtz_locks {
  sched_name String @db.VarChar(120)
  lock_name  String @db.VarChar(40)

  @@id([sched_name, lock_name], map: "pk_qrtz_locks")
}

model qrtz_paused_trigger_grps {
  sched_name    String @db.VarChar(120)
  trigger_group String @db.VarChar(200)

  @@id([sched_name, trigger_group], map: "pk_sched_name")
}

model qrtz_scheduler_state {
  sched_name        String @db.VarChar(120)
  instance_name     String @db.VarChar(200)
  last_checkin_time BigInt
  checkin_interval  BigInt

  @@id([sched_name, instance_name], map: "pk_qrtz_scheduler_state")
}

model qrtz_simple_triggers {
  sched_name      String        @db.VarChar(120)
  trigger_name    String        @db.VarChar(200)
  trigger_group   String        @db.VarChar(200)
  repeat_count    BigInt
  repeat_interval BigInt
  times_triggered BigInt
  qrtz_triggers   qrtz_triggers @relation(fields: [sched_name, trigger_name, trigger_group], references: [sched_name, trigger_name, trigger_group], onDelete: NoAction, onUpdate: NoAction, map: "fk_qrtz_simple_triggers_triggers")

  @@id([sched_name, trigger_name, trigger_group], map: "pk_qrtz_simple_triggers")
}

model qrtz_simprop_triggers {
  sched_name    String        @db.VarChar(120)
  trigger_name  String        @db.VarChar(200)
  trigger_group String        @db.VarChar(200)
  str_prop_1    String?       @db.VarChar(512)
  str_prop_2    String?       @db.VarChar(512)
  str_prop_3    String?       @db.VarChar(512)
  int_prop_1    Int?
  int_prop_2    Int?
  long_prop_1   BigInt?
  long_prop_2   BigInt?
  dec_prop_1    Decimal?      @db.Decimal(13, 4)
  dec_prop_2    Decimal?      @db.Decimal(13, 4)
  bool_prop_1   Boolean?
  bool_prop_2   Boolean?
  qrtz_triggers qrtz_triggers @relation(fields: [sched_name, trigger_name, trigger_group], references: [sched_name, trigger_name, trigger_group], onDelete: NoAction, onUpdate: NoAction, map: "fk_qrtz_simprop_triggers_triggers")

  @@id([sched_name, trigger_name, trigger_group], map: "pk_qrtz_simprop_triggers")
}

model qrtz_triggers {
  sched_name            String                 @db.VarChar(120)
  trigger_name          String                 @db.VarChar(200)
  trigger_group         String                 @db.VarChar(200)
  job_name              String                 @db.VarChar(200)
  job_group             String                 @db.VarChar(200)
  description           String?                @db.VarChar(250)
  next_fire_time        BigInt?
  prev_fire_time        BigInt?
  priority              Int?
  trigger_state         String                 @db.VarChar(16)
  trigger_type          String                 @db.VarChar(8)
  start_time            BigInt
  end_time              BigInt?
  calendar_name         String?                @db.VarChar(200)
  misfire_instr         Int?                   @db.SmallInt
  job_data              Bytes?
  qrtz_job_details      qrtz_job_details       @relation(fields: [sched_name, job_name, job_group], references: [sched_name, job_name, job_group], onDelete: NoAction, onUpdate: NoAction, map: "fk_qrtz_triggers_job_details")
  qrtz_blob_triggers    qrtz_blob_triggers?
  qrtz_cron_triggers    qrtz_cron_triggers?
  qrtz_simple_triggers  qrtz_simple_triggers?
  qrtz_simprop_triggers qrtz_simprop_triggers?

  @@id([sched_name, trigger_name, trigger_group], map: "pk_qrtz_triggers")
  @@index([sched_name, calendar_name], map: "idx_qrtz_t_c")
  @@index([sched_name, trigger_group], map: "idx_qrtz_t_g")
  @@index([sched_name, job_name, job_group], map: "idx_qrtz_t_j")
  @@index([sched_name, job_group], map: "idx_qrtz_t_jg")
  @@index([sched_name, trigger_group, trigger_state], map: "idx_qrtz_t_n_g_state")
  @@index([sched_name, trigger_name, trigger_group, trigger_state], map: "idx_qrtz_t_n_state")
  @@index([sched_name, next_fire_time], map: "idx_qrtz_t_next_fire_time")
  @@index([sched_name, misfire_instr, next_fire_time], map: "idx_qrtz_t_nft_misfire")
  @@index([sched_name, trigger_state, next_fire_time], map: "idx_qrtz_t_nft_st")
  @@index([sched_name, misfire_instr, next_fire_time, trigger_state], map: "idx_qrtz_t_nft_st_misfire")
  @@index([sched_name, misfire_instr, next_fire_time, trigger_group, trigger_state], map: "idx_qrtz_t_nft_st_misfire_grp")
  @@index([sched_name, trigger_state], map: "idx_qrtz_t_state")
}

model query {
  query_hash             Bytes   @id
  average_execution_time Int
  query                  String?
}

model query_cache {
  query_hash Bytes    @id
  updated_at DateTime @db.Timestamptz(6)
  results    Bytes

  @@index([updated_at], map: "idx_query_cache_updated_at")
}

model query_execution {
  id           Int      @id @default(autoincrement())
  hash         Bytes
  started_at   DateTime @db.Timestamptz(6)
  running_time Int
  result_rows  Int
  native       Boolean
  context      String?  @db.VarChar(32)
  error        String?
  executor_id  Int?
  card_id      Int?
  dashboard_id Int?
  pulse_id     Int?
  database_id  Int?
  cache_hit    Boolean?

  @@index([card_id], map: "idx_query_execution_card_id")
  @@index([card_id, started_at], map: "idx_query_execution_card_id_started_at")
  @@index([hash, started_at], map: "idx_query_execution_query_hash_started_at")
  @@index([started_at], map: "idx_query_execution_started_at")
}

model report_card {
  id                                                 Int                         @id @default(autoincrement())
  created_at                                         DateTime                    @db.Timestamptz(6)
  updated_at                                         DateTime                    @db.Timestamptz(6)
  name                                               String                      @db.VarChar(254)
  description                                        String?
  display                                            String                      @db.VarChar(254)
  dataset_query                                      String
  visualization_settings                             String
  creator_id                                         Int
  database_id                                        Int
  table_id                                           Int?
  query_type                                         String?                     @db.VarChar(16)
  archived                                           Boolean                     @default(false)
  collection_id                                      Int?
  public_uuid                                        String?                     @unique @db.Char(36)
  made_public_by_id                                  Int?
  enable_embedding                                   Boolean                     @default(false)
  embedding_params                                   String?
  cache_ttl                                          Int?
  result_metadata                                    String?
  collection_position                                Int?                        @db.SmallInt
  dataset                                            Boolean                     @default(false)
  entity_id                                          String?                     @unique @db.Char(21)
  parameters                                         String?
  parameter_mappings                                 String?
  collection_preview                                 Boolean                     @default(true)
  collection                                         collection?                 @relation(fields: [collection_id], references: [id], onUpdate: NoAction, map: "fk_card_collection_id")
  core_user_core_userToreport_card_creator_id        core_user                   @relation("core_userToreport_card_creator_id", fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_card_ref_user_id")
  metabase_database                                  metabase_database           @relation(fields: [database_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_report_card_ref_database_id")
  core_user_core_userToreport_card_made_public_by_id core_user?                  @relation("core_userToreport_card_made_public_by_id", fields: [made_public_by_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_card_made_public_by_id")
  metabase_table                                     metabase_table?             @relation(fields: [table_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_report_card_ref_table_id")
  card_bookmark                                      card_bookmark[]
  card_label                                         card_label[]
  dashboardcard_series                               dashboardcard_series[]
  group_table_access_policy                          group_table_access_policy[]
  persisted_info                                     persisted_info?
  pulse_card                                         pulse_card[]
  report_cardfavorite                                report_cardfavorite[]
  report_dashboardcard                               report_dashboardcard[]

  @@index([collection_id], map: "idx_card_collection_id")
  @@index([creator_id], map: "idx_card_creator_id")
  @@index([public_uuid], map: "idx_card_public_uuid")
}

model report_cardfavorite {
  id          Int         @id @default(autoincrement())
  created_at  DateTime    @db.Timestamptz(6)
  updated_at  DateTime    @db.Timestamptz(6)
  card_id     Int
  owner_id    Int
  report_card report_card @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_cardfavorite_ref_card_id")
  core_user   core_user   @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_cardfavorite_ref_user_id")

  @@unique([card_id, owner_id], map: "idx_unique_cardfavorite_card_id_owner_id")
  @@index([card_id], map: "idx_cardfavorite_card_id")
  @@index([owner_id], map: "idx_cardfavorite_owner_id")
}

model report_dashboard {
  id                                                      Int                    @id @default(autoincrement())
  created_at                                              DateTime               @db.Timestamptz(6)
  updated_at                                              DateTime               @db.Timestamptz(6)
  name                                                    String                 @db.VarChar(254)
  description                                             String?
  creator_id                                              Int
  parameters                                              String
  points_of_interest                                      String?
  caveats                                                 String?
  show_in_getting_started                                 Boolean                @default(false)
  public_uuid                                             String?                @unique @db.Char(36)
  made_public_by_id                                       Int?
  enable_embedding                                        Boolean                @default(false)
  embedding_params                                        String?
  archived                                                Boolean                @default(false)
  position                                                Int?
  collection_id                                           Int?
  collection_position                                     Int?                   @db.SmallInt
  cache_ttl                                               Int?
  entity_id                                               String?                @unique @db.Char(21)
  collection                                              collection?            @relation(fields: [collection_id], references: [id], onUpdate: NoAction, map: "fk_dashboard_collection_id")
  core_user_core_userToreport_dashboard_creator_id        core_user              @relation("core_userToreport_dashboard_creator_id", fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_dashboard_ref_user_id")
  core_user_core_userToreport_dashboard_made_public_by_id core_user?             @relation("core_userToreport_dashboard_made_public_by_id", fields: [made_public_by_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_dashboard_made_public_by_id")
  dashboard_bookmark                                      dashboard_bookmark[]
  dashboard_favorite                                      dashboard_favorite[]
  pulse                                                   pulse[]
  report_dashboardcard                                    report_dashboardcard[]

  @@index([collection_id], map: "idx_dashboard_collection_id")
  @@index([creator_id], map: "idx_dashboard_creator_id")
  @@index([public_uuid], map: "idx_dashboard_public_uuid")
  @@index([show_in_getting_started], map: "idx_report_dashboard_show_in_getting_started")
}

model report_dashboardcard {
  id                     Int                    @id @default(autoincrement())
  created_at             DateTime               @db.Timestamptz(6)
  updated_at             DateTime               @db.Timestamptz(6)
  sizeX                  Int
  sizeY                  Int
  row                    Int                    @default(0)
  col                    Int                    @default(0)
  card_id                Int?
  dashboard_id           Int
  parameter_mappings     String
  visualization_settings String
  entity_id              String?                @unique @db.Char(21)
  report_card            report_card?           @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_dashboardcard_ref_card_id")
  report_dashboard       report_dashboard       @relation(fields: [dashboard_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_dashboardcard_ref_dashboard_id")
  dashboardcard_series   dashboardcard_series[]
  pulse_card             pulse_card[]

  @@index([card_id], map: "idx_dashboardcard_card_id")
  @@index([dashboard_id], map: "idx_dashboardcard_dashboard_id")
}

model revision {
  id           Int       @id @default(autoincrement())
  model        String    @db.VarChar(16)
  model_id     Int
  user_id      Int
  timestamp    DateTime  @db.Timestamptz(6)
  object       String
  is_reversion Boolean   @default(false)
  is_creation  Boolean   @default(false)
  message      String?
  core_user    core_user @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_revision_ref_user_id")

  @@index([model, model_id], map: "idx_revision_model_model_id")
}

model secret {
  id         Int        @default(autoincrement())
  version    Int        @default(1)
  creator_id Int?
  created_at DateTime   @db.Timestamptz(6)
  updated_at DateTime?  @db.Timestamptz(6)
  name       String     @db.VarChar(254)
  kind       String     @db.VarChar(254)
  source     String?    @db.VarChar(254)
  value      Bytes
  core_user  core_user? @relation(fields: [creator_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_secret_ref_user_id")

  @@id([id, version])
}

model segment {
  id                      Int            @id @default(autoincrement())
  table_id                Int
  creator_id              Int
  name                    String         @db.VarChar(254)
  description             String?
  archived                Boolean        @default(false)
  definition              String
  created_at              DateTime       @db.Timestamptz(6)
  updated_at              DateTime       @db.Timestamptz(6)
  points_of_interest      String?
  caveats                 String?
  show_in_getting_started Boolean        @default(false)
  entity_id               String?        @unique @db.Char(21)
  core_user               core_user      @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_segment_ref_creator_id")
  metabase_table          metabase_table @relation(fields: [table_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_segment_ref_table_id")

  @@index([creator_id], map: "idx_segment_creator_id")
  @@index([show_in_getting_started], map: "idx_segment_show_in_getting_started")
  @@index([table_id], map: "idx_segment_table_id")
}

model setting {
  key   String @id @db.VarChar(254)
  value String
}

model share_user_payments {
  id                       BigInt        @id @default(autoincrement())
  owner_id                 BigInt?
  date                     DateTime?     @db.Timestamp(6)
  song_payment_id          BigInt
  payment_amount           Float?
  paid                     Boolean       @default(false)
  created_at               DateTime      @db.Timestamp(6)
  updated_at               DateTime      @db.Timestamp(6)
  tx_hash                  String?       @db.VarChar
  shares_ids               String?       @db.VarChar
  streaming_value          Float?
  downloads_value          Float?
  physical_sales_value     Float?
  sync_value               Float?
  owner_type               String?       @default("User") @db.VarChar
  owner_deleted            Boolean?      @default(false)
  tv_value                 Float?
  radio_value              Float?
  cinema_value             Float?
  club_and_venues_value    Float?
  live_value               Float?
  international_value      Float?
  recorded_materials_value Float?
  private_copies_value     Float?
  song_payments            song_payments @relation(fields: [song_payment_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_90f33d2420")

  @@index([song_payment_id], map: "index_share_user_payments_on_song_payment_id")
  @@index([owner_id, owner_type], map: "index_share_user_payments_on_owner_id_and_owner_type")
}

model shares {
  id                              BigInt                     @id @default(autoincrement())
  song_id                         BigInt
  bc_token_id                     BigInt?
  initial_price                   Float?
  current_price                   Float?
  contract_version                Int?
  owner_id                        BigInt?
  owner_wallet_address            String?                    @db.VarChar
  unlock_date                     DateTime?                  @db.Timestamp(6)
  metadata_url                    String?                    @db.VarChar
  bc_version_and_token_id         String?                    @unique(map: "index_shares_on_bc_version_and_token_id") @db.VarChar
  created_at                      DateTime                   @db.Timestamp(6)
  updated_at                      DateTime                   @db.Timestamp(6)
  collection_version_and_token_id String?                    @db.VarChar
  primary_market                  Boolean                    @default(true)
  deployed_on_bc                  Boolean                    @default(false)
  ipfs_contract_url               String?                    @db.VarChar
  available                       Boolean                    @default(true)
  locked                          Boolean                    @default(true)
  secondary_market                Boolean                    @default(false)
  compromised                     Boolean?                   @default(false)
  for_claim                       Boolean                    @default(false)
  owner_type                      String?                    @db.VarChar
  bc_location                     String                     @default("swap") @db.VarChar
  songs                           songs                      @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_6fa6251e90")
  blockchain_transactions         blockchain_transactions[]
  sell_offers                     sell_offers[]
  stripe_transaction_shares       stripe_transaction_shares?

  @@index([collection_version_and_token_id], map: "index_shares_on_collection_version_and_token_id")
  @@index([song_id], map: "index_shares_on_song_id")
  @@index([owner_id, owner_type], map: "index_shares_on_owner_id_and_owner_type")
}

model song_details {
  id                  BigInt   @id @default(autoincrement())
  song_id             BigInt
  featured_artists    String?  @db.VarChar
  album               String?  @db.VarChar
  description         String?
  associated_artists  String?  @db.VarChar
  record_label        String?  @db.VarChar
  beats_per_minute    Int?
  isrc                String?  @db.VarChar
  rights_associated   String?  @db.VarChar
  created_at          DateTime @db.Timestamp(6)
  updated_at          DateTime @db.Timestamp(6)
  soundcharts_uuid    String?  @db.VarChar
  duration_in_seconds Int?
  tiktok_id           String?  @db.VarChar
  produced_by         String?  @db.VarChar
  written_by          String?  @db.VarChar
  composed_by         String?  @db.VarChar
  original_title      String?  @db.VarChar
  youtube_id          String?  @db.VarChar
  iswc                String?  @db.VarChar
  right_holders       String?  @db.VarChar
  spotify_id          String?  @db.VarChar
  seller_legal_entity String?  @db.VarChar
  songs               songs    @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_6263e88a58")

  @@index([song_id], map: "index_song_details_on_song_id")
}

model song_payments {
  id                             BigInt                @id @default(autoincrement())
  song_id                        BigInt?
  payment_amount                 Float?
  created_at                     DateTime              @db.Timestamp(6)
  updated_at                     DateTime              @db.Timestamp(6)
  payment_date                   DateTime?             @db.Timestamp(6)
  total_streaming_value          Float?
  total_downloads_value          Float?
  total_physical_sales_value     Float?
  total_sync_value               Float?
  period_start_date              DateTime?             @db.Timestamp(6)
  period_end_date                DateTime?             @db.Timestamp(6)
  total_tv_value                 Float?
  total_radio_value              Float?
  total_cinema_value             Float?
  total_club_and_venues_value    Float?
  total_live_value               Float?
  total_international_value      Float?
  total_recorded_materials_value Float?
  total_private_copies_value     Float?
  share_user_payments            share_user_payments[]

  @@index([song_id], map: "index_song_payments_on_song_id")
}

model song_stats {
  id                    BigInt   @id @default(autoincrement())
  song_id               BigInt
  spotify_streams       BigInt?
  created_at            DateTime @db.Timestamp(6)
  updated_at            DateTime @db.Timestamp(6)
  playlist_count        Int?
  shazam_count          Int?
  tiktok_videos         Int?
  tiktok_play_count     Int?
  tiktok_like_count     Int?
  tiktok_comment_count  Int?
  tiktok_share_count    Int?
  tiktok_download_count Int?
  spotify_dayly_streams BigInt?  @default(0)
  spotify_fake_data     Boolean  @default(false)
  radio_playcounts      Int?
  songs                 songs    @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_fae27e7f0e")

  @@index([song_id], map: "index_song_stats_on_song_id")
}

model song_streaming_platforms {
  id         BigInt   @id @default(autoincrement())
  song_id    BigInt
  name       String?  @db.VarChar
  url        String?  @db.VarChar
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
  songs      songs    @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_b41f2ff591")

  @@index([song_id], map: "index_song_streaming_platforms_on_song_id")
}

model songs {
  id                                 BigInt                     @id @default(autoincrement())
  artist_id                          BigInt
  title                              String?                    @db.VarChar
  floor_price                        Float?
  total_percent                      Float?
  total_edition                      Int?
  payment_frequency_month            Int?
  first_payment_date                 DateTime?                  @db.Timestamp(6)
  release_date                       DateTime?                  @db.Timestamp(6)
  private_sale                       Boolean                    @default(false)
  mint_date                          DateTime?                  @db.Timestamp(6)
  genre_id                           BigInt?
  second_genre_id                    BigInt?
  created_at                         DateTime                   @db.Timestamp(6)
  updated_at                         DateTime                   @db.Timestamp(6)
  published                          Boolean?                   @default(false)
  slug                               String?                    @unique(map: "index_songs_on_slug") @db.VarChar
  unlock_time_in_month               Int                        @default(6)
  hot_stuff_rank                     Int?
  max_shares_count                   Int?
  bolero_primary_market_royalties    Float                      @default(0.025)
  bolero_secondary_market_royalties  Float                      @default(0.025)
  creator_secondary_market_royalties Float                      @default(0.475)
  private_sale_threshold             Float?
  private_sale_end_date              DateTime?                  @db.Timestamp(6)
  published_at                       DateTime?                  @db.Timestamp(6)
  unlock_datetime                    DateTime                   @db.Timestamp(6)
  secondary_market                   Boolean                    @default(false)
  secondary_market_at                DateTime?                  @db.Timestamp(6)
  with_claim                         Boolean                    @default(false)
  shares_for_claim_count             Int?
  is_bolero_collecting               Boolean                    @default(false)
  songtextsearchable_index_col       Unsupported("tsvector")?
  for_gift                           Boolean?                   @default(false)
  gift_rank                          Int?
  spotify_image_url                  String?                    @db.VarChar
  artists                            artists                    @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_5ce8fd4cc7")
  blockchain_transactions            blockchain_transactions[]
  certifications                     certifications[]
  global_transactions                global_transactions[]
  presales                           presales[]
  purchases                          purchases[]
  royalties                          royalties[]
  shares                             shares[]
  song_claims                        song_claims[]
  song_details                       song_details[]
  song_featured_artists              song_featured_artists[]
  song_likes                         song_likes[]
  song_stats                         song_stats[]
  song_streaming_platforms           song_streaming_platforms[]
  song_wallet_details                song_wallet_details[]
  song_yield_investments             song_yield_investments[]
  stripe_transactions                stripe_transactions[]
  top_investments_by_songs           top_investments_by_songs[]
  youtube_stats                      youtube_stats[]

  @@index([artist_id], map: "index_songs_on_artist_id")
  @@index([songtextsearchable_index_col], map: "songtextsearchable_idx")
  @@index([songtextsearchable_index_col], map: "songtextsearchable_index")
}

model task_history {
  id           Int      @id @default(autoincrement())
  task         String   @db.VarChar(254)
  db_id        Int?
  started_at   DateTime @default(now()) @db.Timestamptz(6)
  ended_at     DateTime @default(now()) @db.Timestamptz(6)
  duration     Int
  task_details String?

  @@index([db_id], map: "idx_task_history_db_id")
  @@index([ended_at], map: "idx_task_history_end_time")
}

model timeline {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  description    String?          @db.VarChar(255)
  icon           String           @db.VarChar(128)
  collection_id  Int?
  archived       Boolean          @default(false)
  creator_id     Int
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at     DateTime         @default(now()) @db.Timestamptz(6)
  default        Boolean          @default(false)
  entity_id      String?          @unique @db.Char(21)
  collection     collection?      @relation(fields: [collection_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_timeline_collection_id")
  core_user      core_user        @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_timeline_creator_id")
  timeline_event timeline_event[]

  @@index([collection_id], map: "idx_timeline_collection_id")
}

model timeline_event {
  id           Int       @id @default(autoincrement())
  timeline_id  Int
  name         String    @db.VarChar(255)
  description  String?   @db.VarChar(255)
  timestamp    DateTime  @db.Timestamptz(6)
  time_matters Boolean
  timezone     String    @db.VarChar(255)
  icon         String    @db.VarChar(128)
  archived     Boolean   @default(false)
  creator_id   Int
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  core_user    core_user @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_event_creator_id")
  timeline     timeline  @relation(fields: [timeline_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_events_timeline_id")

  @@index([timeline_id], map: "idx_timeline_event_timeline_id")
  @@index([timeline_id, timestamp], map: "idx_timeline_event_timeline_id_timestamp")
}

model view_log {
  id        Int        @id @default(autoincrement())
  user_id   Int?
  model     String     @db.VarChar(16)
  model_id  Int
  timestamp DateTime   @db.Timestamptz(6)
  metadata  String?
  core_user core_user? @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_view_log_ref_user_id")

  @@index([model_id], map: "idx_view_log_timestamp")
  @@index([user_id], map: "idx_view_log_user_id")
}

model bc_transfer_packages {
  id                        BigInt               @id @default(autoincrement())
  tx_hash                   String               @unique(map: "index_bc_transfer_packages_on_tx_hash") @db.VarChar
  version                   Int
  transfer_type             String               @db.VarChar
  stripe_transaction_id     BigInt?
  created_at                DateTime             @db.Timestamp(6)
  updated_at                DateTime             @db.Timestamp(6)
  all_shares_transferred    Boolean              @default(false)
  shares_count              Int
  transferrable_detail_type String?              @db.VarChar
  transferrable_detail_id   BigInt?
  stripe_transactions       stripe_transactions? @relation(fields: [stripe_transaction_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_cb193e87cc")
  bc_transfers              bc_transfers[]

  @@index([stripe_transaction_id], map: "index_bc_transfer_packages_on_stripe_transaction_id")
  @@index([transferrable_detail_type, transferrable_detail_id], map: "index_bc_transfer_packages_on_transferrable_detail")
}

model bc_transfers {
  id                     BigInt               @id @default(autoincrement())
  bc_transfer_package_id BigInt
  tx_hash                String               @db.VarChar
  token_id               BigInt
  version                Int
  created_at             DateTime             @db.Timestamp(6)
  updated_at             DateTime             @db.Timestamp(6)
  bc_transfer_packages   bc_transfer_packages @relation(fields: [bc_transfer_package_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_673fddef87")

  @@index([bc_transfer_package_id], map: "index_bc_transfers_on_bc_transfer_package_id")
}

model stripe_transaction_shares {
  id                    BigInt              @id @default(autoincrement())
  share_id              BigInt              @unique(map: "index_stripe_transaction_shares_on_share_id")
  stripe_transaction_id BigInt
  share_token_id        BigInt
  share_version         BigInt
  in_vault              Boolean             @default(false)
  in_wallet             Boolean             @default(false)
  created_at            DateTime            @db.Timestamp(6)
  updated_at            DateTime            @db.Timestamp(6)
  shares                shares              @relation(fields: [share_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_e01efb2ba7")
  stripe_transactions   stripe_transactions @relation(fields: [stripe_transaction_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_6dff73fe3b")

  @@index([stripe_transaction_id], map: "index_stripe_transaction_shares_on_stripe_transaction_id")
}

model bc_tx_transfers_packages {
  id                     BigInt     @id @default(autoincrement())
  tx_hash                String?    @unique(map: "index_bc_tx_transfers_packages_on_tx_hash") @db.VarChar
  version                Int?
  shares_count           Int?
  all_shares_transferred Boolean    @default(false)
  created_at             DateTime   @db.Timestamp(6)
  updated_at             DateTime   @db.Timestamp(6)
  sell_offers_token_ids  String?    @db.VarChar
  purchase_id            BigInt?
  purchases              purchases? @relation(fields: [purchase_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_dee1cd6c5b")

  @@index([purchase_id], map: "index_bc_tx_transfers_packages_on_purchase_id")
}

model levels {
  id                  BigInt         @id @default(autoincrement())
  role                String         @db.VarChar
  position            Int
  points              Int?
  fr_description      String?        @db.VarChar
  en_description      String?        @db.VarChar
  discount_percentage Float?
  goodies_type        String?        @db.VarChar
  created_at          DateTime       @db.Timestamp(6)
  updated_at          DateTime       @db.Timestamp(6)
  shares_count        Int            @default(0)
  merchandises        merchandises[]
  user_levels         user_levels[]
}

model merchandises {
  id                BigInt              @id @default(autoincrement())
  fr_name           String?             @db.VarChar
  en_name           String?             @db.VarChar
  str_key           String?             @db.VarChar
  quantity          Int?
  created_at        DateTime            @db.Timestamp(6)
  updated_at        DateTime            @db.Timestamp(6)
  level_id          BigInt?
  levels            levels?             @relation(fields: [level_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_51a9a89313")
  user_merchandises user_merchandises[]

  @@index([level_id], map: "index_merchandises_on_level_id")
}

model song_likes {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt
  song_id    BigInt
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
  songs      songs    @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_3584b69ac5")
  users      users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_dd4ff28987")

  @@index([song_id], map: "index_song_likes_on_song_id")
  @@index([user_id], map: "index_song_likes_on_user_id")
}

model user_levels {
  id                                      BigInt                  @id @default(autoincrement())
  user_id                                 BigInt
  level_id                                BigInt
  claimed                                 Boolean                 @default(false)
  active                                  Boolean                 @default(true)
  claimed_at                              DateTime?               @db.Timestamp(6)
  created_at                              DateTime                @db.Timestamp(6)
  updated_at                              DateTime                @db.Timestamp(6)
  was_token                               Boolean?                @default(false)
  stripe_transaction_id                   BigInt?
  gift_detail_id                          BigInt?
  gift_details                            gift_details?           @relation(fields: [gift_detail_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_efbbc066d9")
  levels                                  levels                  @relation(fields: [level_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_cdb3e7b24f")
  stripe_transactions                     stripe_transactions?    @relation(fields: [stripe_transaction_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_13c1957e3b")
  users_user_levels_user_idTousers        users                   @relation("user_levels_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_957708fd26")
  offchain_transactions                   offchain_transactions[]
  users_user_levelsTousers_user_levels_id users[]                 @relation("user_levelsTousers_user_levels_id")

  @@index([level_id], map: "index_user_levels_on_level_id")
  @@index([user_id], map: "index_user_levels_on_user_id")
  @@index([stripe_transaction_id], map: "index_user_levels_on_stripe_transaction_id")
  @@index([gift_detail_id], map: "index_user_levels_on_gift_detail_id")
}

model user_merchandises {
  id             BigInt       @id @default(autoincrement())
  user_id        BigInt
  merchandise_id BigInt
  delivered      Boolean?     @default(false)
  delivered_at   DateTime?    @db.Date
  created_at     DateTime     @db.Timestamp(6)
  updated_at     DateTime     @db.Timestamp(6)
  merchandises   merchandises @relation(fields: [merchandise_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_34a1ac5828")
  users          users        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_9e9b04a3e5")

  @@index([merchandise_id], map: "index_user_merchandises_on_merchandise_id")
  @@index([user_id], map: "index_user_merchandises_on_user_id")
}

model artist_partner_amount_histories {
  id              BigInt   @id @default(autoincrement())
  artist_id       BigInt
  partners_amount Int      @default(0)
  created_at      DateTime @db.Timestamp(6)
  updated_at      DateTime @db.Timestamp(6)
  artists         artists  @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_a445fa8e44")

  @@index([artist_id], map: "index_artist_partner_amount_histories_on_artist_id")
}

model global_transactions {
  id                      BigInt                @id @default(autoincrement())
  artist_id               BigInt
  song_id                 BigInt?
  buyer_id                BigInt?
  parent_transaction_id   BigInt?
  parent_transaction_type String?               @db.VarChar
  transaction_group_id    BigInt?
  transaction_group_type  String?               @db.VarChar
  usd_price               Float
  artist_earnings         Float
  bolero_earnings         Float
  is_token                Boolean
  is_song_share           Boolean
  token_count             Float?
  shares_count            Int?
  gift                    Boolean               @default(false)
  country_code            String?               @db.VarChar
  primary_market          Boolean               @default(true)
  created_at              DateTime              @db.Timestamp(6)
  updated_at              DateTime              @db.Timestamp(6)
  buyer_tx_count          Int?                  @default(1)
  seller_ids              String?               @db.VarChar
  unique_key              String                @unique(map: "index_global_transactions_on_unique_key") @db.VarChar
  buyer_type              String                @default("User") @db.VarChar
  sellers_type            String?               @db.VarChar
  user_deleted            Boolean               @default(false)
  user_email              String?               @db.VarChar
  artists                 artists               @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_9fa9fe0908")
  songs                   songs?                @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_398a89d997")
  song_wallet_details     song_wallet_details[]

  @@index([artist_id], map: "index_global_transactions_on_artist_id")
  @@index([parent_transaction_id, parent_transaction_type], map: "index_global_transactions_on_parent_transaction")
  @@index([song_id], map: "index_global_transactions_on_song_id")
  @@index([transaction_group_id, transaction_group_type], map: "index_global_transactions_on_transaction_group")
  @@index([buyer_id, buyer_type], map: "index_global_transactions_on_buyer_id_and_buyer_type")
}

model old_transactions {
  id                       BigInt   @id @default(autoincrement())
  status                   String?  @db.VarChar
  total_price              Float?
  cards_count              Float?
  user_id                  BigInt?
  created_at               DateTime @db.Timestamp(6)
  updated_at               DateTime @db.Timestamp(6)
  amount_currency          String   @default("EUR") @db.VarChar
  checkout_session_id      String?  @db.VarChar
  total_price_without_fees Int?     @default(500)
  mail_delivered           Boolean?
  artist_id                BigInt
  users                    users?   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_77364e6416")

  @@index([artist_id], map: "index_old_transactions_on_artist_id")
  @@index([user_id], map: "index_old_transactions_on_user_id")
}

model song_claims {
  id             BigInt   @id @default(autoincrement())
  wallet_address String   @db.VarChar
  song_id        BigInt
  shares_count   Int
  claimed        Boolean  @default(false)
  created_at     DateTime @db.Timestamp(6)
  updated_at     DateTime @db.Timestamp(6)
  owner_type     String?  @db.VarChar
  songs          songs    @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_7f87d8cd26")

  @@unique([wallet_address, owner_type], map: "index_song_claims_on_wallet_address_and_owner_type")
  @@index([song_id], map: "index_song_claims_on_song_id")
}

model blockchain_users {
  id                  BigInt   @id @default(autoincrement())
  wallet_address      String   @db.VarChar
  picture_key         String   @db.VarChar
  user_id             BigInt?
  transformed_to_user Boolean  @default(false)
  created_at          DateTime @db.Timestamp(6)
  updated_at          DateTime @db.Timestamp(6)
  users               users?   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_792e53ab56")

  @@index([user_id], map: "index_blockchain_users_on_user_id")
  @@index([wallet_address], map: "index_blockchain_users_on_wallet_address")
}

model known_addresses {
  id          BigInt   @id @default(autoincrement())
  name        String?  @db.VarChar
  address     String?  @db.VarChar
  is_contract Boolean?
  created_at  DateTime @db.Timestamp(6)
  updated_at  DateTime @db.Timestamp(6)
}

model transfers {
  id                           BigInt   @id @default(autoincrement())
  from                         String   @db.VarChar
  from_type                    String?  @db.VarChar
  to                           String   @db.VarChar
  to_type                      String?  @db.VarChar
  share_token_id               BigInt
  share_version                Int
  share_version_and_token_id   String   @db.VarChar
  transfer_type                String   @db.VarChar
  tx_hash                      String   @db.VarChar
  tx_date                      DateTime @db.Timestamp(6)
  created_at                   DateTime @db.Timestamp(6)
  updated_at                   DateTime @db.Timestamp(6)
  usd_value                    Float?
  artist_earnings_usd_value    Float?
  transformed_to_blockchain_tx Boolean? @default(false)

  @@index([tx_hash], map: "index_transfers_on_tx_hash")
  @@index([from], map: "index_transfers_on_from")
  @@index([share_token_id], map: "index_transfers_on_share_token_id")
  @@index([share_version], map: "index_transfers_on_share_version")
  @@index([share_version_and_token_id], map: "index_transfers_on_share_version_and_token_id")
  @@index([to], map: "index_transfers_on_to")
  @@index([from, from_type], map: "index_transfers_on_from_and_from_type")
  @@index([to, to_type], map: "index_transfers_on_to_and_to_type")
}

model referral_shares {
  id                                            BigInt               @id @default(autoincrement())
  user_id                                       BigInt
  claimed_at                                    DateTime?            @db.Timestamp(6)
  created_at                                    DateTime             @db.Timestamp(6)
  updated_at                                    DateTime             @db.Timestamp(6)
  referred_user_id                              BigInt?
  stripe_transaction_id                         BigInt?
  gift_detail_id                                BigInt?
  gift_details                                  gift_details?        @relation(fields: [gift_detail_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_ad4a7d9601")
  users_referral_shares_referred_user_idTousers users?               @relation("referral_shares_referred_user_idTousers", fields: [referred_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_b4aa7ccc19")
  stripe_transactions                           stripe_transactions? @relation(fields: [stripe_transaction_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_f81cf6254e")
  users_referral_shares_user_idTousers          users                @relation("referral_shares_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_175c3e6a86")

  @@index([referred_user_id], map: "index_referral_shares_on_referred_user_id")
  @@index([user_id], map: "index_referral_shares_on_user_id")
  @@index([stripe_transaction_id], map: "index_referral_shares_on_stripe_transaction_id")
  @@index([gift_detail_id], map: "index_referral_shares_on_gift_detail_id")
}

model song_featured_artists {
  id         BigInt   @id @default(autoincrement())
  artist_id  BigInt
  song_id    BigInt
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
  rank       Int?     @default(1)
  artists    artists  @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_664b409762")
  songs      songs    @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_f2fa9dd86b")

  @@index([artist_id], map: "index_song_featured_artists_on_artist_id")
  @@index([song_id], map: "index_song_featured_artists_on_song_id")
}

model song_wallet_details {
  id                    BigInt               @id @default(autoincrement())
  user_id               BigInt
  song_id               BigInt
  song_price            Float
  shares_owned_count    Int
  total_owned_value     Float
  transaction_date      DateTime             @db.Timestamp(6)
  profit_value          Float
  created_at            DateTime             @db.Timestamp(6)
  updated_at            DateTime             @db.Timestamp(6)
  is_tx_actor           Boolean              @default(false)
  global_transaction_id BigInt?
  purchase_id           BigInt?
  global_transactions   global_transactions? @relation(fields: [global_transaction_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_8a8703e43f")
  purchases             purchases?           @relation(fields: [purchase_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_56cd5f2784")
  songs                 songs                @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_d5ac1f654e")
  users                 users                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_f671d67bef")

  @@index([song_id], map: "index_song_wallet_details_on_song_id")
  @@index([user_id], map: "index_song_wallet_details_on_user_id")
  @@index([global_transaction_id], map: "index_song_wallet_details_on_global_transaction_id")
  @@index([purchase_id], map: "index_song_wallet_details_on_purchase_id")
}

model youtube_stats {
  id                 BigInt    @id @default(autoincrement())
  song_id            BigInt
  total_views_count  Int
  weekly_views_count Int
  created_at         DateTime  @db.Timestamp(6)
  updated_at         DateTime  @db.Timestamp(6)
  date               DateTime? @db.Timestamp(6)
  songs              songs     @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_0f69397e71")

  @@index([song_id], map: "index_youtube_stats_on_song_id")
}

model blockchain_details {
  id                         BigInt    @id @default(autoincrement())
  tx_hash                    String    @db.VarChar
  hex_value                  String    @db.VarChar
  want_address               String    @db.VarChar
  want_token_symbol          String?   @db.VarChar
  transfer_type              String?   @db.VarChar
  seller_address             String?   @db.VarChar
  seller_id                  BigInt?
  seller_type                String?   @db.VarChar
  share_token_id             BigInt
  share_version              Int
  share_version_and_token_id String    @db.VarChar
  purchase_id                BigInt
  created_at                 DateTime  @db.Timestamp(6)
  updated_at                 DateTime  @db.Timestamp(6)
  purchases                  purchases @relation(fields: [purchase_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_4a8f0644e3")

  @@index([purchase_id], map: "index_blockchain_details_on_purchase_id")
  @@index([share_version_and_token_id], map: "index_blockchain_details_on_share_version_and_token_id")
  @@index([tx_hash], map: "index_blockchain_details_on_tx_hash")
  @@index([seller_id, seller_type], map: "index_seller_on_seller_id_and_seller_type")
}

model deprecated_nft_transactions {
  id                    BigInt   @id @default(autoincrement())
  raw_price_cents       Int
  paid_price_cents      Int
  artist_earnings_cents Int
  user_id               BigInt?
  nft_id                BigInt
  deleted_user_email    String?  @db.VarChar
  created_at            DateTime @db.Timestamp(6)
  updated_at            DateTime @db.Timestamp(6)
  country_code          String?  @db.VarChar
  primary_market        Boolean? @default(true)
  tx_hash               String?  @db.VarChar
  nfts                  nfts     @relation(fields: [nft_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_04bc143a0f")
  users                 users?   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_22172f42ad")

  @@index([nft_id], map: "index_deprecated_nft_transactions_on_nft_id")
  @@index([user_id], map: "index_deprecated_nft_transactions_on_user_id")
}

model deprecated_token_transactions {
  id                    BigInt   @id @default(autoincrement())
  token_count           Float
  gift                  Boolean  @default(false)
  raw_price_cents       Int
  paid_price_cents      Int
  fees_cents            Int
  discount_cents        Int
  artist_earnings_cents Int
  deleted_user_email    String?  @db.VarChar
  user_id               BigInt?
  artist_id             BigInt
  created_at            DateTime @db.Timestamp(6)
  updated_at            DateTime @db.Timestamp(6)
  payment_type          String?  @db.VarChar
  country_code          String?  @db.VarChar
  stripe_fees_cents     Int?     @default(0)
  tx_hash               String?  @db.VarChar
  payment_intent_id     String?  @db.VarChar
  artists               artists  @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_fb03c67ea9")
  users                 users?   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_5d3be924cc")

  @@index([artist_id], map: "index_deprecated_token_transactions_on_artist_id")
  @@index([user_id], map: "index_deprecated_token_transactions_on_user_id")
}

model gift_details {
  id                 BigInt            @id @default(autoincrement())
  purchase_id        BigInt
  gift_type          String?           @db.VarChar
  created_at         DateTime          @db.Timestamp(6)
  updated_at         DateTime          @db.Timestamp(6)
  shares_bc_location String            @default("swap") @db.VarChar
  purchases          purchases         @relation(fields: [purchase_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_394a534388")
  referral_shares    referral_shares[]
  user_levels        user_levels[]

  @@index([purchase_id], map: "index_gift_details_on_purchase_id")
}

model purchase_shares {
  id                         BigInt    @id @default(autoincrement())
  share_token_id             BigInt
  share_version              Int
  share_version_and_token_id String    @db.VarChar
  purchase_id                BigInt
  created_at                 DateTime  @db.Timestamp(6)
  updated_at                 DateTime  @db.Timestamp(6)
  purchases                  purchases @relation(fields: [purchase_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_5ebe3c82e9")

  @@index([purchase_id], map: "index_purchase_shares_on_purchase_id")
  @@index([share_version_and_token_id], map: "index_purchase_shares_on_share_version_and_token_id")
}

model purchases {
  id                        BigInt                      @id @default(autoincrement())
  song_id                   BigInt
  buyer_id                  BigInt?
  buyer_type                String?                     @db.VarChar
  shares_count              Int
  raw_price_cents           Int
  fees_cents                Int?
  discount_cents            Int?
  paid_price_cents          Int?
  artist_earnings_cents     Int?
  primary_market            Boolean                     @default(true)
  payment_status            String                      @db.VarChar
  payment_type              String?                     @db.VarChar
  country_code              String?                     @db.VarChar
  deleted_user              Boolean                     @default(false)
  deleted_user_email        String?                     @db.VarChar
  created_at                DateTime                    @db.Timestamp(6)
  updated_at                DateTime                    @db.Timestamp(6)
  songs                     songs                       @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_744827ac27")
  bc_tx_transfers_packages  bc_tx_transfers_packages[]
  blockchain_details        blockchain_details[]
  direct_sale_details       direct_sale_details[]
  discounts                 discounts[]
  gift_details              gift_details[]
  purchase_shares           purchase_shares[]
  song_wallet_details       song_wallet_details[]
  stripe_details            stripe_details[]
  temporary_purchase_shares temporary_purchase_shares[]

  @@index([buyer_id, buyer_type], map: "index_purchases_on_buyer_id_and_buyer_type")
  @@index([song_id], map: "index_purchases_on_song_id")
}

model rewinds {
  id                       BigInt                     @id @default(autoincrement())
  user_id                  BigInt
  investor_type            String?                    @db.VarChar
  owned_songs              Int?
  owned_shares             Int?
  followers_count          Int?
  xps_earned               Float?
  leaderboard_position     Int?
  total_earned             Float?
  created_at               DateTime                   @db.Timestamp(6)
  updated_at               DateTime                   @db.Timestamp(6)
  users                    users                      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_96dd035dc7")
  top_investments_by_songs top_investments_by_songs[]
  top_partners_by_artists  top_partners_by_artists[]

  @@index([user_id], map: "index_rewinds_on_user_id")
}

model song_yield_investments {
  id               BigInt   @id @default(autoincrement())
  song_id          BigInt
  yield_percentage Float?
  year             String?  @db.VarChar
  created_at       DateTime @db.Timestamp(6)
  updated_at       DateTime @db.Timestamp(6)
  songs            songs    @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_f02b1c5173")

  @@index([song_id], map: "index_song_yield_investments_on_song_id")
}

model stripe_details {
  id                         BigInt    @id @default(autoincrement())
  raw_price_cents_in_euros   Int
  fees_cents_in_euros        Int
  discount_cents_in_euros    Int
  purchase_id                BigInt
  payment_intent_secret      String    @db.VarChar
  created_at                 DateTime  @db.Timestamp(6)
  updated_at                 DateTime  @db.Timestamp(6)
  stripe_fees_cents          Int?      @default(0)
  stripe_fees_cents_in_euros Int?      @default(0)
  shares_bc_location         String    @default("swap") @db.VarChar
  purchases                  purchases @relation(fields: [purchase_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_24a7feb534")

  @@index([purchase_id], map: "index_stripe_details_on_purchase_id")
  @@index([payment_intent_secret], map: "index_stripe_details_on_payment_intent_secret")
}

model temporary_purchase_shares {
  id                         BigInt    @id @default(autoincrement())
  share_version_and_token_id String    @unique(map: "index_temporary_purchase_shares_on_share_version_and_token_id") @db.VarChar
  purchase_id                BigInt
  created_at                 DateTime  @db.Timestamp(6)
  updated_at                 DateTime  @db.Timestamp(6)
  purchases                  purchases @relation(fields: [purchase_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_4b90c820db")

  @@index([purchase_id], map: "index_temporary_purchase_shares_on_purchase_id")
}

model token_refunds {
  id          BigInt   @id @default(autoincrement())
  total_value Float
  tx_hash     String?  @db.VarChar
  claimed     Boolean  @default(false)
  user_id     BigInt
  created_at  DateTime @db.Timestamp(6)
  updated_at  DateTime @db.Timestamp(6)
  users       users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_a1184054a8")

  @@index([user_id], map: "index_token_refunds_on_user_id")
}

model top_investments_by_songs {
  id               BigInt   @id @default(autoincrement())
  rewind_id        BigInt
  song_id          BigInt
  yield_percentage Float?
  shares_count     Int?
  rank_position    Int?
  created_at       DateTime @db.Timestamp(6)
  updated_at       DateTime @db.Timestamp(6)
  rewinds          rewinds  @relation(fields: [rewind_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_87f6744757")
  songs            songs    @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_b0726cf369")

  @@index([rewind_id], map: "index_top_investments_by_songs_on_rewind_id")
  @@index([song_id], map: "index_top_investments_by_songs_on_song_id")
}

model top_partners_by_artists {
  id            BigInt   @id @default(autoincrement())
  artist_id     BigInt
  rewind_id     BigInt
  shares_count  Int?
  songs_count   Int?
  rank_position Int?
  created_at    DateTime @db.Timestamp(6)
  updated_at    DateTime @db.Timestamp(6)
  artists       artists  @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_5ef8b08d88")
  rewinds       rewinds  @relation(fields: [rewind_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_1ddf841025")

  @@index([artist_id], map: "index_top_partners_by_artists_on_artist_id")
  @@index([rewind_id], map: "index_top_partners_by_artists_on_rewind_id")
}

model royalties {
  id                 BigInt   @id @default(autoincrement())
  period_start_date  DateTime @db.Timestamp(6)
  period_end_date    DateTime @db.Timestamp(6)
  total              Float
  tv                 Float?
  radio              Float?
  streaming          Float?
  cinema             Float?
  club_and_venues    Float?
  live               Float?
  international      Float?
  recorded_materials Float?
  private_copies     Float?
  song_id            BigInt
  created_at         DateTime @db.Timestamp(6)
  updated_at         DateTime @db.Timestamp(6)
  songs              songs    @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_13cdc43fcc")

  @@index([song_id], map: "index_royalties_on_song_id")
}

model direct_sale_details {
  id                 BigInt    @id @default(autoincrement())
  purchase_id        BigInt
  client_name        String?   @db.VarChar
  shares_bc_location String    @default("swap") @db.VarChar
  created_at         DateTime  @db.Timestamp(6)
  updated_at         DateTime  @db.Timestamp(6)
  purchases          purchases @relation(fields: [purchase_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_dda9e37669")

  @@index([purchase_id], map: "index_direct_sale_details_on_purchase_id")
}

model presales {
  id         BigInt   @id @default(autoincrement())
  song_title String   @db.VarChar
  song_isrc  String   @db.VarChar
  user_id    BigInt
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
  song_id    BigInt?
  songs      songs?   @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_30b7c852ac")
  users      users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_7f3a409b58")

  @@index([song_id], map: "index_presales_on_song_id")
  @@index([user_id], map: "index_presales_on_user_id")
}

model release_banners {
  id           BigInt    @id @default(autoincrement())
  release_name String    @db.VarChar
  active       Boolean   @default(false)
  activated_at DateTime? @db.Timestamp(6)
  url_path     String?   @db.VarChar
  created_at   DateTime  @db.Timestamp(6)
  updated_at   DateTime  @db.Timestamp(6)
}
