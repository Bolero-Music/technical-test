generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model artists {
  id                                BigInt                            @id @default(autoincrement())
  name                              String                            @db.VarChar
  genre                             String?                           @db.VarChar
  soundcloud_profile                String?                           @db.VarChar
  spotify_profile                   String?                           @db.VarChar
  deezer_profile                    String?                           @db.VarChar
  apple_profile                     String?                           @db.VarChar
  youtube_profile                   String?                           @db.VarChar
  instagram_profile                 String?                           @db.VarChar
  tiktok_profile                    String?                           @db.VarChar
  twitch_profile                    String?                           @db.VarChar
  facebook_profile                  String?                           @db.VarChar
  created_at                        DateTime                          @db.Timestamp(6)
  updated_at                        DateTime                          @db.Timestamp(6)
  user_id                           BigInt
  card_name                         String?                           @db.VarChar
  card_price_cents                  String                            @default("5000000000000000000") @db.VarChar
  card_price_evolution              Float?
  country                           String?                           @db.VarChar
  twitter_profile                   String?                           @db.VarChar
  validated                         Boolean                           @default(false)
  uuid                              String?                           @db.VarChar
  slug                              String?                           @unique(map: "index_artists_on_slug") @db.VarChar
  second_genre                      String?                           @db.VarChar
  third_genre                       String?                           @db.VarChar
  category                          String?                           @db.VarChar
  validated_at                      DateTime?                         @db.Timestamp(6)
  phone_number                      String?
  songkick_profile                  String?                           @db.VarChar
  active                            Boolean?                          @default(true)
  total_cards_supply                Float?                            @default(1000.0)
  management_mail                   String                            @db.VarChar
  management_phone                  String?                           @db.VarChar
  publisher                         String?                           @db.VarChar
  label                             String?                           @db.VarChar
  genius_url                        String?                           @db.VarChar
  beatmaker                         Boolean?                          @default(false)
  genius_id                         String?                           @db.VarChar
  tokenized                         Boolean                           @default(false)
  token_contract_address_deprecated String?                           @db.VarChar
  audius_profile                    String?                           @db.VarChar
  tokenized_at                      DateTime?                         @db.Timestamp(6)
  early                             Boolean?                          @default(false)
  suspended                         Boolean?                          @default(false)
  deprecated                        Boolean?                          @default(false)
  token_primary                     Boolean?                          @default(true)
  token_on_secondary_at             DateTime?                         @db.Timestamp(6)
  token_for_bolero                  Float?                            @default(0.05)
  token_for_artist                  Float?                            @default(0.2)
  token_for_liquidity               Float?                            @default(0.2)
  is_frozen                         Boolean                           @default(true)
  shares                            Float                             @default(0.8)
  home_top_section_rank             Int?
  home_stay_ahead_section_rank      Int?
  similar                           Boolean                           @default(false)
  for_gift_only                     Boolean                           @default(false)
  music_genre_id                    BigInt?
  hot_stuff_rank                    Int?
  country_flag                      String?                           @db.VarChar
  current_status                    String?                           @db.VarChar
  reward_email                      String?                           @db.VarChar
  stripe_country                    String?                           @db.VarChar
  visible                           Boolean?                          @default(false)
  visible_at                        DateTime?                         @db.Timestamp(6)
  teasing_mode                      Boolean?                          @default(false)
  ready_to_tease                    Boolean?                          @default(false)
  teasing_description               String?
  major                             String?                           @db.VarChar
  is_doing_song                     Boolean?                          @default(false)
  is_doing_token                    Boolean?                          @default(false)
  bio_fr                            String?
  bio_en                            String?
  certified                         Boolean                           @default(true)
  song_featured_only                Boolean?                          @default(false)
  artisttextsearchable_index_col    Unsupported("tsvector")?
  spotify_image_url                 String?                           @db.VarChar
  music_genres                      music_genres?                     @relation(fields: [music_genre_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_0b5a15b091")
  users                             users                             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_6bcbebdd23")
  artist_metrics                    artist_metrics[]
  artist_partner_amount_histories   artist_partner_amount_histories[]
  artist_tokens                     artist_tokens[]
  blockchain_transactions           blockchain_transactions[]
  collections                       collections[]
  compilations                      compilations[]
  contributors                      contributors[]
  deprecated_token_transactions     deprecated_token_transactions[]
  discounts                         discounts[]
  global_transactions               global_transactions[]
  multiple_groups                   multiple_groups[]
  nfts                              nfts[]
  offchain_transactions             offchain_transactions[]
  partnerships                      partnerships[]
  song_featured_artists             song_featured_artists[]
  songs                             songs[]
  stripe_splitters                  stripe_splitters[]
  stripe_transactions               stripe_transactions[]
  token_prices                      token_prices[]
  top_partners_by_artists           top_partners_by_artists[]
  update_bc_prices                  update_bc_prices[]
  user_perks                        user_perks[]

  @@index([artisttextsearchable_index_col], map: "artisttextsearch_idx")
  @@index([artisttextsearchable_index_col], map: "artisttextsearchable_index")
  @@index([music_genre_id], map: "index_artists_on_music_genre_id")
  @@index([user_id], map: "index_artists_on_user_id")
}

model schema_migrations {
  version String @id @db.VarChar
}

model users {
  id                                                      BigInt                          @id @default(autoincrement())
  email                                                   String                          @unique(map: "index_users_on_email") @default("") @db.VarChar
  encrypted_password                                      String                          @default("") @db.VarChar
  reset_password_token                                    String?                         @unique(map: "index_users_on_reset_password_token") @db.VarChar
  reset_password_sent_at                                  DateTime?                       @db.Timestamp(6)
  remember_created_at                                     DateTime?                       @db.Timestamp(6)
  created_at                                              DateTime                        @db.Timestamp(6)
  updated_at                                              DateTime                        @db.Timestamp(6)
  first_name                                              String?                         @db.VarChar
  last_name                                               String?                         @db.VarChar
  birth_date                                              DateTime?                       @db.Date
  confirmation_token                                      String?                         @unique(map: "index_users_on_confirmation_token") @db.VarChar
  confirmed_at                                            DateTime?                       @db.Timestamp(6)
  confirmation_sent_at                                    DateTime?                       @db.Timestamp(6)
  unconfirmed_email                                       String?                         @db.VarChar
  admin                                                   Boolean?                        @default(false)
  stripe_id                                               String?                         @db.VarChar
  artist_role                                             Boolean?                        @default(false)
  referral_code                                           String?                         @db.VarChar
  referred_by_id                                          Int?
  referral_completed_at                                   DateTime?                       @db.Timestamp(6)
  default_currency                                        String?                         @db.VarChar
  locale                                                  String?                         @default("en") @db.VarChar
  username                                                String?                         @db.VarChar
  slug                                                    String?                         @unique(map: "index_users_on_slug") @db.VarChar
  wallet_address                                          String?                         @db.VarChar
  connected_wallet_once                                   Boolean?                        @default(false)
  received_tokens_from_olds_txs                           Boolean?                        @default(false)
  charges_enabled                                         Boolean?                        @default(false)
  can_accept_card_payment                                 Boolean?                        @default(false)
  intercom_hash                                           String?                         @db.VarChar
  sign_in_count                                           Int                             @default(0)
  current_sign_in_at                                      DateTime?                       @db.Timestamp(6)
  last_sign_in_at                                         DateTime?                       @db.Timestamp(6)
  current_sign_in_ip                                      String?                         @db.VarChar
  last_sign_in_ip                                         String?                         @db.VarChar
  country_code                                            String?                         @db.VarChar
  discord_username                                        String?                         @db.VarChar
  admin_permissions                                       String[]                        @db.VarChar
  provider                                                String                          @default("email") @db.VarChar
  uid                                                     String                          @default("") @db.VarChar
  tokens                                                  Json?                           @db.Json
  allow_password_change                                   Boolean?                        @default(false)
  phone_number                                            String?                         @db.VarChar
  finished_stripe_onboarding                              Boolean                         @default(false)
  used_referral_code                                      Boolean                         @default(false)
  default_profile_picture_key                             String?                         @db.VarChar
  default_cover_picture_key                               String?                         @db.VarChar
  stripe_customer_id                                      String?                         @db.VarChar
  instagram_username                                      String?                         @db.VarChar
  banned                                                  Boolean?                        @default(false)
  completed_all_reward_tasks                              Boolean?                        @default(false)
  user_levels_id                                          BigInt?
  description                                             String?                         @default("") @db.VarChar
  twitter_username                                        String?                         @db.VarChar
  tiktok_username                                         String?                         @db.VarChar
  connected_wallet_on_v2                                  Boolean                         @default(false)
  with_bolero_wallet                                      Boolean                         @default(false)
  usertextsearchable_index_col                            Unsupported("tsvector")?
  tk_sub_org_id                                           String?                         @db.VarChar
  tk_pk_id                                                String?                         @db.VarChar
  is_bolero_coworker                                      Boolean?                        @default(false)
  is_beta_tester                                          Boolean                         @default(false)
  is_marketting_partner                                   Boolean                         @default(false)
  user_levels_user_levelsTousers_user_levels_id           user_levels?                    @relation("user_levelsTousers_user_levels_id", fields: [user_levels_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_2d0996a61f")
  artists                                                 artists[]
  banned_ip_addresses                                     banned_ip_addresses[]
  bid_offers                                              bid_offers[]
  blockchain_users                                        blockchain_users[]
  currencies                                              currencies[]
  deprecated_nft_transactions                             deprecated_nft_transactions[]
  deprecated_token_transactions                           deprecated_token_transactions[]
  discounts                                               discounts[]
  early_access_list_users                                 early_access_list_users[]
  last_user_visits                                        last_user_visits[]
  nfts                                                    nfts[]
  notifications                                           notifications[]
  offchain_transactions                                   offchain_transactions[]
  old_transactions                                        old_transactions[]
  partnerships                                            partnerships[]
  points                                                  points[]
  presales                                                presales[]
  referral_shares_referral_shares_referred_user_idTousers referral_shares[]               @relation("referral_shares_referred_user_idTousers")
  referral_shares_referral_shares_user_idTousers          referral_shares[]               @relation("referral_shares_user_idTousers")
  rewinds                                                 rewinds[]
  song_likes                                              song_likes[]
  song_wallet_details                                     song_wallet_details[]
  splitter_beneficiaries                                  splitter_beneficiaries[]
  stage_members                                           stage_members[]
  stripe_payment_methods                                  stripe_payment_methods[]
  token_refunds                                           token_refunds[]
  user_levels_user_levels_user_idTousers                  user_levels[]                   @relation("user_levels_user_idTousers")
  user_merchandises                                       user_merchandises[]
  user_perks                                              user_perks[]
  user_reward_tasks                                       user_reward_tasks[]

  @@unique([uid, provider], map: "index_users_on_uid_and_provider")
  @@index([wallet_address], map: "index_users_on_wallet_address")
  @@index([usertextsearchable_index_col], map: "usertextsearchable_idx")
  @@index([usertextsearchable_index_col], map: "usertextsearchable_index")
  @@index([user_levels_id], map: "index_users_on_user_levels_id")
}

model songs {
  id                                 BigInt                     @id @default(autoincrement())
  artist_id                          BigInt
  title                              String?                    @db.VarChar
  floor_price                        Float?
  total_percent                      Float?
  total_edition                      Int?
  payment_frequency_month            Int?
  first_payment_date                 DateTime?                  @db.Timestamp(6)
  release_date                       DateTime?                  @db.Timestamp(6)
  private_sale                       Boolean                    @default(false)
  mint_date                          DateTime?                  @db.Timestamp(6)
  genre_id                           BigInt?
  second_genre_id                    BigInt?
  created_at                         DateTime                   @db.Timestamp(6)
  updated_at                         DateTime                   @db.Timestamp(6)
  published                          Boolean?                   @default(false)
  slug                               String?                    @unique(map: "index_songs_on_slug") @db.VarChar
  unlock_time_in_month               Int                        @default(6)
  hot_stuff_rank                     Int?
  max_shares_count                   Int?
  bolero_primary_market_royalties    Float                      @default(0.025)
  bolero_secondary_market_royalties  Float                      @default(0.025)
  creator_secondary_market_royalties Float                      @default(0.475)
  private_sale_threshold             Float?
  private_sale_end_date              DateTime?                  @db.Timestamp(6)
  published_at                       DateTime?                  @db.Timestamp(6)
  unlock_datetime                    DateTime                   @db.Timestamp(6)
  secondary_market                   Boolean                    @default(false)
  secondary_market_at                DateTime?                  @db.Timestamp(6)
  with_claim                         Boolean                    @default(false)
  shares_for_claim_count             Int?
  is_bolero_collecting               Boolean                    @default(false)
  songtextsearchable_index_col       Unsupported("tsvector")?
  for_gift                           Boolean?                   @default(false)
  gift_rank                          Int?
  spotify_image_url                  String?                    @db.VarChar
  artists                            artists                    @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_5ce8fd4cc7")
  blockchain_transactions            blockchain_transactions[]
  certifications                     certifications[]
  global_transactions                global_transactions[]
  presales                           presales[]
  purchases                          purchases[]
  royalties                          royalties[]
  shares                             shares[]
  song_claims                        song_claims[]
  song_details                       song_details[]
  song_featured_artists              song_featured_artists[]
  song_likes                         song_likes[]
  song_stats                         song_stats[]
  song_streaming_platforms           song_streaming_platforms[]
  song_wallet_details                song_wallet_details[]
  song_yield_investments             song_yield_investments[]
  stripe_transactions                stripe_transactions[]
  top_investments_by_songs           top_investments_by_songs[]
  youtube_stats                      youtube_stats[]

  @@index([artist_id], map: "index_songs_on_artist_id")
  @@index([songtextsearchable_index_col], map: "songtextsearchable_idx")
  @@index([songtextsearchable_index_col], map: "songtextsearchable_index")
}

model bc_transfer_packages {
  id                        BigInt               @id @default(autoincrement())
  tx_hash                   String               @unique(map: "index_bc_transfer_packages_on_tx_hash") @db.VarChar
  version                   Int
  transfer_type             String               @db.VarChar
  stripe_transaction_id     BigInt?
  created_at                DateTime             @db.Timestamp(6)
  updated_at                DateTime             @db.Timestamp(6)
  all_shares_transferred    Boolean              @default(false)
  shares_count              Int
  transferrable_detail_type String?              @db.VarChar
  transferrable_detail_id   BigInt?
  stripe_transactions       stripe_transactions? @relation(fields: [stripe_transaction_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_cb193e87cc")
  bc_transfers              bc_transfers[]

  @@index([stripe_transaction_id], map: "index_bc_transfer_packages_on_stripe_transaction_id")
  @@index([transferrable_detail_type, transferrable_detail_id], map: "index_bc_transfer_packages_on_transferrable_detail")
}

model bc_transfers {
  id                     BigInt               @id @default(autoincrement())
  bc_transfer_package_id BigInt
  tx_hash                String               @db.VarChar
  token_id               BigInt
  version                Int
  created_at             DateTime             @db.Timestamp(6)
  updated_at             DateTime             @db.Timestamp(6)
  bc_transfer_packages   bc_transfer_packages @relation(fields: [bc_transfer_package_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_673fddef87")

  @@index([bc_transfer_package_id], map: "index_bc_transfers_on_bc_transfer_package_id")
}

model blockchain_users {
  id                  BigInt   @id @default(autoincrement())
  wallet_address      String   @db.VarChar
  picture_key         String   @db.VarChar
  user_id             BigInt?
  transformed_to_user Boolean  @default(false)
  created_at          DateTime @db.Timestamp(6)
  updated_at          DateTime @db.Timestamp(6)
  users               users?   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_792e53ab56")

  @@index([user_id], map: "index_blockchain_users_on_user_id")
  @@index([wallet_address], map: "index_blockchain_users_on_wallet_address")
}

model purchases {
  id                        BigInt                      @id @default(autoincrement())
  song_id                   BigInt
  buyer_id                  BigInt?
  buyer_type                String?                     @db.VarChar
  shares_count              Int
  raw_price_cents           Int
  fees_cents                Int?
  discount_cents            Int?
  paid_price_cents          Int?
  artist_earnings_cents     Int?
  primary_market            Boolean                     @default(true)
  payment_status            String                      @db.VarChar
  payment_type              String?                     @db.VarChar
  country_code              String?                     @db.VarChar
  deleted_user              Boolean                     @default(false)
  deleted_user_email        String?                     @db.VarChar
  created_at                DateTime                    @db.Timestamp(6)
  updated_at                DateTime                    @db.Timestamp(6)
  songs                     songs                       @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_744827ac27")
  bc_tx_transfers_packages  bc_tx_transfers_packages[]
  blockchain_details        blockchain_details[]
  direct_sale_details       direct_sale_details[]
  discounts                 discounts[]
  gift_details              gift_details[]
  purchase_shares           purchase_shares[]
  song_wallet_details       song_wallet_details[]
  stripe_details            stripe_details[]
  temporary_purchase_shares temporary_purchase_shares[]

  @@index([buyer_id, buyer_type], map: "index_purchases_on_buyer_id_and_buyer_type")
  @@index([song_id], map: "index_purchases_on_song_id")
}

model stripe_details {
  id                         BigInt    @id @default(autoincrement())
  raw_price_cents_in_euros   Int
  fees_cents_in_euros        Int
  discount_cents_in_euros    Int
  purchase_id                BigInt
  payment_intent_secret      String    @db.VarChar
  created_at                 DateTime  @db.Timestamp(6)
  updated_at                 DateTime  @db.Timestamp(6)
  stripe_fees_cents          Int?      @default(0)
  stripe_fees_cents_in_euros Int?      @default(0)
  shares_bc_location         String    @default("swap") @db.VarChar
  purchases                  purchases @relation(fields: [purchase_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_24a7feb534")

  @@index([purchase_id], map: "index_stripe_details_on_purchase_id")
  @@index([payment_intent_secret], map: "index_stripe_details_on_payment_intent_secret")
}

model gift_details {
  id                 BigInt            @id @default(autoincrement())
  purchase_id        BigInt
  gift_type          String?           @db.VarChar
  created_at         DateTime          @db.Timestamp(6)
  updated_at         DateTime          @db.Timestamp(6)
  shares_bc_location String            @default("swap") @db.VarChar
  purchases          purchases         @relation(fields: [purchase_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_394a534388")
  referral_shares    referral_shares[]
  user_levels        user_levels[]

  @@index([purchase_id], map: "index_gift_details_on_purchase_id")
}

model direct_sale_details {
  id                 BigInt    @id @default(autoincrement())
  purchase_id        BigInt
  client_name        String?   @db.VarChar
  shares_bc_location String    @default("swap") @db.VarChar
  created_at         DateTime  @db.Timestamp(6)
  updated_at         DateTime  @db.Timestamp(6)
  purchases          purchases @relation(fields: [purchase_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_dda9e37669")

  @@index([purchase_id], map: "index_direct_sale_details_on_purchase_id")
}

model purchase_shares {
  id                         BigInt    @id @default(autoincrement())
  share_token_id             BigInt
  share_version              Int
  share_version_and_token_id String    @db.VarChar
  purchase_id                BigInt
  created_at                 DateTime  @db.Timestamp(6)
  updated_at                 DateTime  @db.Timestamp(6)
  purchases                  purchases @relation(fields: [purchase_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_5ebe3c82e9")

  @@index([purchase_id], map: "index_purchase_shares_on_purchase_id")
  @@index([share_version_and_token_id], map: "index_purchase_shares_on_share_version_and_token_id")
}